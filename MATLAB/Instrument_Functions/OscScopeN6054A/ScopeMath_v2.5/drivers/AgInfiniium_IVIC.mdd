<?xml version="1.0" encoding="utf-8"?>
<MATLABInstrumentDriver>
   <Copyright>Copyright 2012 The Mathworks, Inc.</Copyright>
   <FileVersion>2.42</FileVersion>
   <DriverName>AgInfiniium</DriverName>
   <DriverType>MATLAB IVI-C</DriverType>
   <InstrumentType>IVIInstrument</InstrumentType>
   <InstrumentManufacturer>Agilent Technologies</InstrumentManufacturer>
   <InstrumentModel>AgilentInfiniium</InstrumentModel>
   <InstrumentVersion>1.0</InstrumentVersion>
   <Identify/>
   <Reset/>
   <Selftest/>
   <Error/>
   <CreateInitCode>
      <Code>function init(obj)
% This function is called after the object is created.
% OBJ is the device object.
% End of function definition - DO NOT EDIT
</Code>
   </CreateInitCode>
   <ConnectInitCode>
      <Type>MCode</Type>
      <Code>function init(obj)
% This function is called after the object is connected.
% OBJ is the device object.
% End of function definition - DO NOT EDIT
</Code>
   </ConnectInitCode>
   <CleanupCode>
      <Type>MCode</Type>
      <Code>function cleanup(obj)
% This function is called before the object is disconnected.
% OBJ is the device object.
% End of function definition - DO NOT EDIT
</Code>
   </CleanupCode>
   <GroupInfo>
      <Group>
         <Name>parent</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="parent1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>initwithoptions</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Vi] = initwithoptions(obj, ResourceName, IdQuery, Reset, OptionsString)

libname = get(obj, 'DriverName');
session = get(obj, 'Interface');
ResourceName = [double(ResourceName) 0];
OptionsString = [double(OptionsString) 0];
Vi = libpointer('uint32Ptr', 0);

status = calllib(libname, 'AgInfiniium_InitWithOptions', ResourceName, IdQuery, Reset, OptionsString, Vi);

Vi = double(Vi.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Opens the I/O session to the instrument.  Driver methods and properties that access the instrument are only accessible after Initialize is called.  Initialize optionally performs a Reset and queries the instrument to validate the instrument model.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Acquisition</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Acquisition1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Acquisition_Start_Time</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250109);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250109 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The length of time from the trigger event to the first point in the waveform record.  The units are seconds.  If positive, the first point in the waveform occurs after the trigger.  If negative, the first point in the waveform occurs before the trigger."</Description>
            </Property>
            <Property>
               <Name>Acquisition_Type</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250101);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250101 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>2.0</Value>
                     <Value>0.0</Value>
                     <Value>4.0</Value>
                     <Value>1.0</Value>
                     <Value>3.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"How the oscilloscope acquires data and fills the waveform record.  When set to Envelope or Peak Detect, the oscilloscope acquires minimum and maximum waveforms."</Description>
            </Property>
            <Property>
               <Name>Horizontal_Minimum_Number_of_Points</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250009);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250009 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The minimum number of points which can be in a waveform record for each channel.  It configures the record length that the oscilloscope uses for waveform acquisition.  The Record Length property returns the actual record length."</Description>
            </Property>
            <Property>
               <Name>Horizontal_Record_Length</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250008);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"The actual number of points the oscilloscope acquires for each channel.  It is equal to or greater than the minimum number of points specified with the Horizontal Minimum Number of Points property."</Description>
            </Property>
            <Property>
               <Name>Horizontal_Sample_Rate</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250010);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"The effective digitizing rate using the current configuration.  The units are samples per second."</Description>
            </Property>
            <Property>
               <Name>Horizontal_Time_Per_Record</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250007);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250007 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The time in seconds that corresponds to the record length."</Description>
            </Property>
            <Property>
               <Name>Initiate_Continuous</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1250107);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1250107, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"If True, the oscilloscope waits trigger holdoff seconds after a waveform acquisition is complete and then immediately enters the wait for trigger state without passing through the idle state."</Description>
            </Property>
            <Property>
               <Name>Interpolation</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250019);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250019 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>3.0</Value>
                     <Value>2.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The interpolation method the oscilloscope uses when it cannot sample a voltage for every point in the waveform record."</Description>
            </Property>
            <Property>
               <Name>Number_of_Averages</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250104);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250104 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The number of waveforms the oscilloscope acquires and averages before returning to the idle state."</Description>
            </Property>
            <Property>
               <Name>Number_of_Envelopes</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250105);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250105 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The number of waveforms the oscilloscope acquires and analyzes to create the minimum and maximum waveforms, before returning to the idle state.  Applies only when acquisition Type is Envelope"</Description>
            </Property>
            <Property>
               <Name>Sample_Mode</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250106);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"The sample mode the oscilloscope is currently using."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>AttributeAccessors</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="AttributeAccessors1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>getattributeviboolean</Name>
               <Location>AttributeAccessors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [AttributeValue] = getattributeviboolean(obj, RepCapIdentifier, AttributeID)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
RepCapIdentifier = [double(RepCapIdentifier) 0];
AttributeValue = libpointer('uint16Ptr', 0);

status = calllib(libname, 'AgInfiniium_GetAttributeViBoolean', session, RepCapIdentifier, AttributeID, AttributeValue);

AttributeValue = double(AttributeValue.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This routine is used to access low-level settings of the instrument. See the attributeID parameter for a link to all attributes of the instrument.</Description>
            </Method>
            <Method>
               <Name>getattributeviint32</Name>
               <Location>AttributeAccessors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [AttributeValue] = getattributeviint32(obj, RepCapIdentifier, AttributeID)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
RepCapIdentifier = [double(RepCapIdentifier) 0];
AttributeValue = libpointer('int32Ptr', 0);

status = calllib(libname, 'AgInfiniium_GetAttributeViInt32', session, RepCapIdentifier, AttributeID, AttributeValue);

AttributeValue = double(AttributeValue.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This routine is used to access low-level settings of the instrument. See the attributeID parameter for a link to all attributes of the instrument.</Description>
            </Method>
            <Method>
               <Name>getattributeviint64</Name>
               <Location>AttributeAccessors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [AttributeValue] = getattributeviint64(obj, RepCapIdentifier, AttributeID)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
RepCapIdentifier = [double(RepCapIdentifier) 0];
AttributeValue = libpointer('int64Ptr', 0);

status = calllib(libname, 'AgInfiniium_GetAttributeViInt64', session, RepCapIdentifier, AttributeID, AttributeValue);

AttributeValue = double(AttributeValue.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This routine is used to access low-level settings of the instrument. See the attributeID parameter for a link to all attributes of the instrument.</Description>
            </Method>
            <Method>
               <Name>getattributevireal64</Name>
               <Location>AttributeAccessors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [AttributeValue] = getattributevireal64(obj, RepCapIdentifier, AttributeID)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
RepCapIdentifier = [double(RepCapIdentifier) 0];
AttributeValue = libpointer('doublePtr', 0);

status = calllib(libname, 'AgInfiniium_GetAttributeViReal64', session, RepCapIdentifier, AttributeID, AttributeValue);

AttributeValue = double(AttributeValue.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This routine is used to access low-level settings of the instrument. See the attributeID parameter for a link to all attributes of the instrument.</Description>
            </Method>
            <Method>
               <Name>getattributevisession</Name>
               <Location>AttributeAccessors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [AttributeValue] = getattributevisession(obj, RepCapIdentifier, AttributeID)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
RepCapIdentifier = [double(RepCapIdentifier) 0];
AttributeValue = libpointer('uint32Ptr', 0);

status = calllib(libname, 'AgInfiniium_GetAttributeViSession', session, RepCapIdentifier, AttributeID, AttributeValue);

AttributeValue = double(AttributeValue.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This routine is used to access low-level settings of the instrument. See the attributeID parameter for a link to all attributes of the instrument.</Description>
            </Method>
            <Method>
               <Name>getattributevistring</Name>
               <Location>AttributeAccessors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [AttributeValue] = getattributevistring(obj, RepCapIdentifier, AttributeID, AttributeValueBufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
RepCapIdentifier = [double(RepCapIdentifier) 0];
AttributeValue = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'AgInfiniium_GetAttributeViString', session, RepCapIdentifier, AttributeID, AttributeValueBufferSize, AttributeValue);

AttributeValue = strtrim(char(AttributeValue.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This routine is used to access low-level settings of the instrument. See the attributeID parameter for a link to all attributes of the instrument.</Description>
            </Method>
            <Method>
               <Name>setattributeviboolean</Name>
               <Location>AttributeAccessors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setattributeviboolean(obj, RepCapIdentifier, AttributeID, AttributeValue)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
RepCapIdentifier = [double(RepCapIdentifier) 0];

status = calllib(libname, 'AgInfiniium_SetAttributeViBoolean', session, RepCapIdentifier, AttributeID, AttributeValue);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This routine is used to access low-level settings of the instrument. See the attributeID parameter for a link to all attributes of the instrument.</Description>
            </Method>
            <Method>
               <Name>setattributeviint32</Name>
               <Location>AttributeAccessors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setattributeviint32(obj, RepCapIdentifier, AttributeID, AttributeValue)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
RepCapIdentifier = [double(RepCapIdentifier) 0];

status = calllib(libname, 'AgInfiniium_SetAttributeViInt32', session, RepCapIdentifier, AttributeID, AttributeValue);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This routine is used to access low-level settings of the instrument. See the attributeID parameter for a link to all attributes of the instrument.</Description>
            </Method>
            <Method>
               <Name>setattributeviint64</Name>
               <Location>AttributeAccessors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setattributeviint64(obj, RepCapIdentifier, AttributeID, AttributeValue)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
RepCapIdentifier = [double(RepCapIdentifier) 0];

status = calllib(libname, 'AgInfiniium_SetAttributeViInt64', session, RepCapIdentifier, AttributeID, AttributeValue);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This routine is used to access low-level settings of the instrument. See the attributeID parameter for a link to all attributes of the instrument.</Description>
            </Method>
            <Method>
               <Name>setattributevireal64</Name>
               <Location>AttributeAccessors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setattributevireal64(obj, RepCapIdentifier, AttributeID, AttributeValue)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
RepCapIdentifier = [double(RepCapIdentifier) 0];

status = calllib(libname, 'AgInfiniium_SetAttributeViReal64', session, RepCapIdentifier, AttributeID, AttributeValue);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This routine is used to access low-level settings of the instrument. See the attributeID parameter for a link to all attributes of the instrument.</Description>
            </Method>
            <Method>
               <Name>setattributevisession</Name>
               <Location>AttributeAccessors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setattributevisession(obj, RepCapIdentifier, AttributeID, AttributeValue)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
RepCapIdentifier = [double(RepCapIdentifier) 0];

status = calllib(libname, 'AgInfiniium_SetAttributeViSession', session, RepCapIdentifier, AttributeID, AttributeValue);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This routine is used to access low-level settings of the instrument. See the attributeID parameter for a link to all attributes of the instrument.</Description>
            </Method>
            <Method>
               <Name>setattributevistring</Name>
               <Location>AttributeAccessors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setattributevistring(obj, RepCapIdentifier, AttributeID, AttributeValue)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
RepCapIdentifier = [double(RepCapIdentifier) 0];
AttributeValue = [double(AttributeValue) 0];

status = calllib(libname, 'AgInfiniium_SetAttributeViString', session, RepCapIdentifier, AttributeID, AttributeValue);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This routine is used to access low-level settings of the instrument. See the attributeID parameter for a link to all attributes of the instrument.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Channel</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Channel1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Channel_Count</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1050203);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"The number of channels."</Description>
            </Property>
            <Property>
               <Name>Channel_Enabled</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1250005);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1250005, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"If True, the oscilloscope acquires a waveform for this channel when the Initiate Acquisition, Read Waveform, Read Min Max Waveform, or Read Waveform Measurement methods are called."</Description>
            </Property>
            <Property>
               <Name>Input_Impedance</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250103);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250103 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The input impedance of this channel.  The units are ohms."</Description>
            </Property>
            <Property>
               <Name>Invert</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150015);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150015, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"If True, the oscilloscope displays the waveform inverted for the channel."</Description>
            </Property>
            <Property>
               <Name>Maximum_Input_Frequency</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250006);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250006 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The maximum input frequency of this channel.  It the frequency at which the input circuitry attenuates the input signal by 3 dB.  The units are hertz."</Description>
            </Property>
            <Property>
               <Name>Probe_Sense_Value</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250108);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"The probe attenuation value the oscilloscope automatically senses.  If the automatic probe sense is disabled, its value is the manual probe attenuation setting."</Description>
            </Property>
            <Property>
               <Name>Probe_Skew</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150020);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150020 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The skew factor in seconds that the probe is delaying the signal as it propagates through the probe."</Description>
            </Property>
            <Property>
               <Name>Protection</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150021);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"--READ ONLY-- Whether the automatic input voltage overload protection circuit has tripped due to an overload condition at the input."</Description>
            </Property>
            <Property>
               <Name>Vertical_Coupling</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250003);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250003 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"How the oscilloscope couples the input signal."</Description>
            </Property>
            <Property>
               <Name>Vertical_Offset</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250002);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250002 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The location of the center of the range that you specify with the Range property.  The units are volts, with respect to ground.  For example, to acquire a sine wave spanning 0.0 to 10.0 volts, set Offset to 5.0 volts."</Description>
            </Property>
            <Property>
               <Name>Vertical_Range</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250001);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250001 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The absolute value of the input range the oscilloscope can acquire for the channel.  The units are volts.  For example, to acquire a sine wave spanning -5.0 to 5.0 volts, set Range to 10.0 volts."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>channelclearprotection</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function channelclearprotection(obj, RepCapIdentifier)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
RepCapIdentifier = [double(RepCapIdentifier) 0];

status = calllib(libname, 'AgInfiniium_ChannelClearProtection', session, RepCapIdentifier);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Clears a tripped input overload condition (if the overload condition has been removed).</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurableMeasurement</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurableMeasurement1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Time_At_Edge_Occurrence</Name>
               <Location>ConfigurableMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150024);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150024 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The occurrence count for the TimeAtEdge measurement."</Description>
            </Property>
            <Property>
               <Name>Time_At_Edge_Slope</Name>
               <Location>ConfigurableMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150025);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150025 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The edge slope for a TimeAtEdge measurement."</Description>
            </Property>
            <Property>
               <Name>Time_At_Value_Occurrence</Name>
               <Location>ConfigurableMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150026);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150026 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The occurrence count for the TimeAtValue measurement measurement."</Description>
            </Property>
            <Property>
               <Name>Time_At_Value_Slope</Name>
               <Location>ConfigurableMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150027);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150027 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The edge slope for a TimeAtValue measurement."</Description>
            </Property>
            <Property>
               <Name>Time_At_Value_Value</Name>
               <Location>ConfigurableMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150028);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150028 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The voltage for the TimeAtValue measurement."</Description>
            </Property>
            <Property>
               <Name>Value_At_Time_Time</Name>
               <Location>ConfigurableMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150029);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150029 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The time (in seconds) used to make the ValueAtTime measurement."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>ConfigurationAcquisition</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationAcquisition1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configureacquisitionrecord</Name>
               <Location>ConfigurationAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureacquisitionrecord(obj, TimePerRecord, MinNumPts, AcquisitionStartTime)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'AgInfiniium_ConfigureAcquisitionRecord', session, TimePerRecord, MinNumPts, AcquisitionStartTime);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures the most commonly used properties of the oscilloscope's acquisition subsystem: time per record, minimum record length, and the acquisition start time.</Description>
            </Method>
            <Method>
               <Name>configureacquisitiontype</Name>
               <Location>ConfigurationAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureacquisitiontype(obj, AcquisitionType)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'AgInfiniium_ConfigureAcquisitionType', session, AcquisitionType);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures how the oscilloscope acquires data and fills the waveform record.</Description>
            </Method>
            <Method>
               <Name>configureinitiatecontinuous</Name>
               <Location>ConfigurationAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureinitiatecontinuous(obj, ContinuousAcquisition)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'AgInfiniium_ConfigureInitiateContinuous', session, ContinuousAcquisition);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the oscilloscope to perform a continuous acquisition.</Description>
            </Method>
            <Method>
               <Name>configureinterpolation</Name>
               <Location>ConfigurationAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureinterpolation(obj, Interpolation)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'AgInfiniium_ConfigureInterpolation', session, Interpolation);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the interpolation method the oscilloscope uses when it cannot sample a voltage for a point in the waveform record.</Description>
            </Method>
            <Method>
               <Name>configurenumaverages</Name>
               <Location>ConfigurationAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurenumaverages(obj, NumberOfAverages)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'AgInfiniium_ConfigureNumAverages', session, NumberOfAverages);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the number of waveforms that the oscilloscope acquires and averages. After the oscilloscope acquires number of waveforms specified, it returns to the idle state. Set the acquisition type to Average before calling this function. If the acquisition type is not set to Average, the function returns the Invalid Acquisition Type error.</Description>
            </Method>
            <Method>
               <Name>configurenumenvelopes</Name>
               <Location>ConfigurationAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurenumenvelopes(obj, NumEnvelopes)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'AgInfiniium_ConfigureNumEnvelopes', session, NumEnvelopes);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the number of waveforms the oscilloscope acquires and analyzes to create the minimum and maximum waveforms.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationChannel</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationChannel1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configurechancharacteristics</Name>
               <Location>ConfigurationChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurechancharacteristics(obj, Channel, InputImpedance, MaxInputFrequency)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'AgInfiniium_ConfigureChanCharacteristics', session, Channel, InputImpedance, MaxInputFrequency);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures the properties that control the electrical characteristics of the channel.  They are the input impedance and the maximum frequency of the input signal.</Description>
            </Method>
            <Method>
               <Name>configurechannel</Name>
               <Location>ConfigurationChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurechannel(obj, Channel, Range, Offset, Coupling, ProbeAttenuation, Enabled)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];

status = calllib(libname, 'AgInfiniium_ConfigureChannel', session, Channel, Range, Offset, Coupling, ProbeAttenuation, Enabled);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures the most commonly used properties of the oscilloscope channel sub-system.  They are the range, offset, coupling, probe attenuation, and whether the channel is enabled.</Description>
            </Method>
            <Method>
               <Name>getchannelname</Name>
               <Location>ConfigurationChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Name] = getchannelname(obj, Index, NameBufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Name = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'AgInfiniium_GetChannelName', session, Index, NameBufferSize, Name);

Name = strtrim(char(Name.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function returns the physical channel identifier that corresponds to the one-based index that the user specifies. If the value that the user passes for the ChannelIndex parameter is less than one or greater than the value of the Channel Count, the function returns an empty string in the ChannelName parameter and returns an error.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationConfigurationInformation</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationConfigurationInformation1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>actualrecordlength</Name>
               <Location>ConfigurationConfigurationInformation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [ActualRecordLength] = actualrecordlength(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ActualRecordLength = libpointer('int32Ptr', 0);

status = calllib(libname, 'AgInfiniium_ActualRecordLength', session, ActualRecordLength);

ActualRecordLength = double(ActualRecordLength.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function returns the actual number of points the oscilloscope acquires per channel. After configuring the oscilloscope for an acquisition, call this function to determine the size of the waveforms that the oscilloscope acquires. The value is equal to or greater than the minimum number of points specified in the Configure Acquisition Record function. For IVI-C drivers, allocate a ViReal64 array of this size or greater to pass as the WaveformArray parameter of the IviScope_ReadWaveform and IviScope_FetchWaveform functions. The oscilloscope may use different size records depending on the acquisition type. Specify the acquisition type with the Configure Acquisition Type function.</Description>
            </Method>
            <Method>
               <Name>autoprobesensevalue</Name>
               <Location>ConfigurationConfigurationInformation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [AutoProbeSenseValue] = autoprobesensevalue(obj, ChannelName)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];
AutoProbeSenseValue = libpointer('doublePtr', 0);

status = calllib(libname, 'AgInfiniium_AutoProbeSenseValue', session, ChannelName, AutoProbeSenseValue);

AutoProbeSenseValue = double(AutoProbeSenseValue.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>The function returns the probe attenuation value the oscilloscope senses. The capability is enabled by setting the probeAttenuation parameter of the Configure Channel function to Probe Sense On. If the automatic probe sense capability is disabled, this function returns the manual probe attenuation setting.</Description>
            </Method>
            <Method>
               <Name>autosetup</Name>
               <Location>ConfigurationConfigurationInformation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function autosetup(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'AgInfiniium_AutoSetup', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Automatically configures all the oscilloscopes settings based on the input signals.</Description>
            </Method>
            <Method>
               <Name>samplerate</Name>
               <Location>ConfigurationConfigurationInformation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [SampleRate] = samplerate(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
SampleRate = libpointer('doublePtr', 0);

status = calllib(libname, 'AgInfiniium_SampleRate', session, SampleRate);

SampleRate = double(SampleRate.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function returns the effective sample rate of the acquired waveform using the current configuration in samples per second.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationMeasurement</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationMeasurement1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configurereflevels</Name>
               <Location>ConfigurationMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurereflevels(obj, Low, Mid, High)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'AgInfiniium_ConfigureRefLevels', session, Low, Mid, High);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures the reference levels for waveform measurements, low, mid, and high.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurationTrigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurationTrigger1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>configureaclinetriggerslope</Name>
               <Location>ConfigurationTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureaclinetriggerslope(obj, ACLineSlope)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'AgInfiniium_ConfigureAcLineTriggerSlope', session, ACLineSlope);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the slope of the AC Line trigger. This function affects instrument behavior only if the trigger type is AC Line Trigger. Call the Configure Trigger function to set the trigger type before calling this function.</Description>
            </Method>
            <Method>
               <Name>configureedgetriggersource</Name>
               <Location>ConfigurationTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureedgetriggersource(obj, Source, Level, Slope)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Source = [double(Source) 0];

status = calllib(libname, 'AgInfiniium_ConfigureEdgeTriggerSource', session, Source, Level, Slope);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures the conditions for edge trigger.  An edge trigger occurs when the trigger source signal passes through the trigger level with the specified slope.</Description>
            </Method>
            <Method>
               <Name>configureglitchtriggersource</Name>
               <Location>ConfigurationTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configureglitchtriggersource(obj, Source, Level, GlitchWidth, GlitchPolarity, GlitchCondition)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Source = [double(Source) 0];

status = calllib(libname, 'AgInfiniium_ConfigureGlitchTriggerSource', session, Source, Level, GlitchWidth, GlitchPolarity, GlitchCondition);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configure the glitch trigger Source, Level, Width, Polarity, and Condition.  A glitch trigger occurs when the edge of a pulse that matches the Width and Polarity crosses the specified Level (in Volts).</Description>
            </Method>
            <Method>
               <Name>configurerunttriggersource</Name>
               <Location>ConfigurationTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurerunttriggersource(obj, Source, RuntThresholdLow, RuntThresholdHigh, RuntPolarity)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Source = [double(Source) 0];

status = calllib(libname, 'AgInfiniium_ConfigureRuntTriggerSource', session, Source, RuntThresholdLow, RuntThresholdHigh, RuntPolarity);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures the runt trigger Source, ThresholdLow, ThresholdHigh, and Polarity.  A runt trigger occurs when the trigger signal crosses one of the runt thresholds twice without crossing the other runt threshold.</Description>
            </Method>
            <Method>
               <Name>configuretrigger</Name>
               <Location>ConfigurationTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuretrigger(obj, TriggerType, Holdoff)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'AgInfiniium_ConfigureTrigger', session, TriggerType, Holdoff);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures trigger Type and Holdoff.  Holdoff units are seconds.</Description>
            </Method>
            <Method>
               <Name>configuretriggercoupling</Name>
               <Location>ConfigurationTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuretriggercoupling(obj, Coupling)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'AgInfiniium_ConfigureTriggerCoupling', session, Coupling);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function sets the trigger coupling attribute.</Description>
            </Method>
            <Method>
               <Name>configuretriggermodifier</Name>
               <Location>ConfigurationTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuretriggermodifier(obj, TriggerModifier)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'AgInfiniium_ConfigureTriggerModifier', session, TriggerModifier);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the oscilloscope's trigger modifier.</Description>
            </Method>
            <Method>
               <Name>configuretvtriggerlinenumber</Name>
               <Location>ConfigurationTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuretvtriggerlinenumber(obj, TVLineNumber)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'AgInfiniium_ConfigureTVTriggerLineNumber', session, TVLineNumber);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function configures the TV line upon which the oscilloscope triggers. The line number is absolute and not relative to the field of the TV signal. This function affects instrument behavior only if the trigger type is set to the TV Trigger value and the TV trigger event is set to the TV Event Line Number value. Call the Configure TV Trigger Source function to set the TV trigger event before calling this function.</Description>
            </Method>
            <Method>
               <Name>configuretvtriggersource</Name>
               <Location>ConfigurationTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuretvtriggersource(obj, Source, TVSignalFormat, TVEvent, TVPolarity)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Source = [double(Source) 0];

status = calllib(libname, 'AgInfiniium_ConfigureTVTriggerSource', session, Source, TVSignalFormat, TVEvent, TVPolarity);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures the TV trigger source, signal format, event and polarity.</Description>
            </Method>
            <Method>
               <Name>configurewidthtriggersource</Name>
               <Location>ConfigurationTrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configurewidthtriggersource(obj, Source, Level, WidthLowThreshold, WidthHighThreshold, WidthPolarity, WidthCondition)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Source = [double(Source) 0];

status = calllib(libname, 'AgInfiniium_ConfigureWidthTriggerSource', session, Source, Level, WidthLowThreshold, WidthHighThreshold, WidthPolarity, WidthCondition);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures the width trigger Source, Level, ThresholdLow, ThresholdHigh, Polarity, and Condition.  A width trigger occurs when a pulse, that passes through Level, with a width between or outside, the width thresholds is detected.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Cursors</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Cursors1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>X1_Position</Name>
               <Location>Cursors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150031);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150031 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The X1 Cursor position.  The units are seconds."</Description>
            </Property>
            <Property>
               <Name>X1Y1_Source</Name>
               <Location>Cursors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150032, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150032 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The source the oscilloscope uses as the for the X1/Y1 cursors."</Description>
            </Property>
            <Property>
               <Name>X2_Position</Name>
               <Location>Cursors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150033);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150033 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The X2 Cursor position.  The units are seconds."</Description>
            </Property>
            <Property>
               <Name>X2Y2_Source</Name>
               <Location>Cursors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150034, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150034 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The source the oscilloscope uses as the for the X2/Y2 cursors."</Description>
            </Property>
            <Property>
               <Name>Y1_Position</Name>
               <Location>Cursors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150035);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150035 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The Y1 Cursor position.  The units are those of the X1Y1Source."</Description>
            </Property>
            <Property>
               <Name>Y2_Position</Name>
               <Location>Cursors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150036);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150036 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The Y2 Cursor position.  The units are those of the X2Y2Source."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>DigitalChannel</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="DigitalChannel1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>DigitalChannel_Count</Name>
               <Location>DigitalChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150630);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Attribute that contains the number of DigitalChannels available on the instrument. This is the maximum index that may be used with the GetDigitalChannelName() function."</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>DigitalChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150037);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150037, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"If True, the oscilloscope acquires a waveform for the channel."</Description>
            </Property>
            <Property>
               <Name>Label</Name>
               <Location>DigitalChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150038, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150038 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The label which the oscilloscope displays for the digital channels."</Description>
            </Property>
            <Property>
               <Name>Threshold</Name>
               <Location>DigitalChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150039);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150039 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The voltage threshold for the digital channels."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>digitalchannelfetchdigitalwaveform</Name>
               <Location>DigitalChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pWaveformArray, pWaveformArrayActualSize, pInitialX, pXIncrement] = digitalchannelfetchdigitalwaveform(obj, RepCapIdentifier, pWaveformArrayBufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
RepCapIdentifier = [double(RepCapIdentifier) 0];
pWaveformArray = libpointer('int8Ptr', repmat(10, 1, 512));
pWaveformArrayActualSize = libpointer('int32Ptr', 0);
pInitialX = libpointer('doublePtr', 0);
pXIncrement = libpointer('doublePtr', 0);

status = calllib(libname, 'AgInfiniium_DigitalChannelFetchDigitalWaveform', session, RepCapIdentifier, pWaveformArrayBufferSize, pWaveformArray, pWaveformArrayActualSize, pInitialX, pXIncrement);

pWaveformArray = strtrim(char(pWaveformArray.Value));
pWaveformArrayActualSize = double(pWaveformArrayActualSize.Value);
pInitialX = double(pInitialX.Value);
pXIncrement = double(pXIncrement.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Returns the previously-acquired waveform for the specified digital channel.</Description>
            </Method>
            <Method>
               <Name>digitalchannelreaddigitalwaveform</Name>
               <Location>DigitalChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pWaveformArray, pWaveformArrayActualSize, pInitialX, pXIncrement] = digitalchannelreaddigitalwaveform(obj, RepCapIdentifier, MaxTime, pWaveformArrayBufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
RepCapIdentifier = [double(RepCapIdentifier) 0];
pWaveformArray = libpointer('int8Ptr', repmat(10, 1, 512));
pWaveformArrayActualSize = libpointer('int32Ptr', 0);
pInitialX = libpointer('doublePtr', 0);
pXIncrement = libpointer('doublePtr', 0);

status = calllib(libname, 'AgInfiniium_DigitalChannelReadDigitalWaveform', session, RepCapIdentifier, MaxTime, pWaveformArrayBufferSize, pWaveformArray, pWaveformArrayActualSize, pInitialX, pXIncrement);

pWaveformArray = strtrim(char(pWaveformArray.Value));
pWaveformArrayActualSize = double(pWaveformArrayActualSize.Value);
pInitialX = double(pInitialX.Value);
pXIncrement = double(pXIncrement.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Acquires and returns a waveform on the specified digital channel.</Description>
            </Method>
            <Method>
               <Name>getdigitalchannelname</Name>
               <Location>DigitalChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Name] = getdigitalchannelname(obj, Index, NameBufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Name = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'AgInfiniium_GetDigitalChannelName', session, Index, NameBufferSize, Name);

Name = strtrim(char(Name.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>&#xD;
 This function returns the physical identifier that corresponds to the one-based index that the &#xD;
 user specifies. If the value that the user passes for the Index parameter is less than one or &#xD;
 greater than the value of the corresponding DigitalChannel Count attribute, the function returns&#xD;
 an empty string in the Name parameter and returns an error.&#xD;
 </Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Display</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Display1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Label_Enabled</Name>
               <Location>Display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150040);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150040, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"If True, the oscilloscope displays labels for all channels."</Description>
            </Property>
            <Property>
               <Name>Persist_Time</Name>
               <Location>Display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150042);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150042 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The persistence time in seconds."</Description>
            </Property>
            <Property>
               <Name>Persistence</Name>
               <Location>Display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150041);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150041, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"If True, the persistence mode of the oscilloscope display is turned on."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>displayconfigure</Name>
               <Location>Display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function displayconfigure(obj, PersistTime)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'AgInfiniium_DisplayConfigure', session, PersistTime);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures the display persistence.</Description>
            </Method>
            <Method>
               <Name>displayerase</Name>
               <Location>Display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function displayerase(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'AgInfiniium_DisplayErase', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Clears the display and resets all associated measurements.  If the oscilloscope is stopped, all currently displayed data is erased.  If the oscilloscope is running, all the data in active channels and functions is erased.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>DriverStatus</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="DriverStatus1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>statusclear</Name>
               <Location>DriverStatus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function statusclear(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'AgInfiniium_StatusClear', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Clears all event registers and error queue. The enable registers are unaffected.</Description>
            </Method>
            <Method>
               <Name>statusconfigureservicerequest</Name>
               <Location>DriverStatus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function statusconfigureservicerequest(obj, Reason)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'AgInfiniium_StatusConfigureServiceRequest', session, Reason);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Clears all the enable registers. It then sets the appropriate transition filters and enable registers so when the specified event(s) occur(s) the instrument requests service. All other events are disabled from generating a service request.</Description>
            </Method>
            <Method>
               <Name>statusgetregister</Name>
               <Location>DriverStatus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [RetVal] = statusgetregister(obj, Register, SubRegister)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
RetVal = libpointer('int32Ptr', 0);

status = calllib(libname, 'AgInfiniium_StatusGetRegister', session, Register, SubRegister, RetVal);

RetVal = double(RetVal.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>The status register and subregister.</Description>
            </Method>
            <Method>
               <Name>statuspreset</Name>
               <Location>DriverStatus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function statuspreset(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'AgInfiniium_StatusPreset', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets the SCPI defined enable registers and transition filters. It performs the actions specified by SCPI for the :STATus:PREset command, see SCPI Vol. 2: Command Reference, section 20.7.</Description>
            </Method>
            <Method>
               <Name>statussetregister</Name>
               <Location>DriverStatus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function statussetregister(obj, Register, SubRegister, Val)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'AgInfiniium_StatusSetRegister', session, Register, SubRegister, Val);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>The status register and subregister.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>External</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="External1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Probe_Attenuation</Name>
               <Location>External</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150043);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150043 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The scaling factor by which the probe attached to the external trigger attenuates the input."</Description>
            </Property>
            <Property>
               <Name>Probe_Sense</Name>
               <Location>External</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150044);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"--READ ONLY-- The probe attenuation value that the oscilloscope automatically senses."</Description>
            </Property>
            <Property>
               <Name>Units</Name>
               <Location>External</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150045);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150045 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>1001.0</Value>
                     <Value>1000.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The units used for the external trigger."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>InherentIVIAttributesAdvancedSessionInformation</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InherentIVIAttributesAdvancedSessionInformation1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Driver_Setup</Name>
               <Location>InherentIVIAttributesAdvancedSessionInformation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050007, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"--READ ONLY-- The driver setup string.  It is either specified in the Configuration Store or passed in the OptionString parameter of the Initialize function.  Driver setup is empty if the driver is not initialized."</Description>
            </Property>
            <Property>
               <Name>I_O_Resource_Descriptor</Name>
               <Location>InherentIVIAttributesAdvancedSessionInformation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050304, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"--READ ONLY-- The resource descriptor specifies the connection to a physical device.  It is either specified in the Configuration Store or passed in the ResourceName parameter of the Initialize function.  It is empty if the driver is not initialized."</Description>
            </Property>
            <Property>
               <Name>Logical_Name</Name>
               <Location>InherentIVIAttributesAdvancedSessionInformation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050305, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"--READ ONLY-- Logical Name identifies a driver session in the Configuration Store."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>InherentIVIAttributesDriverCapabilities</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InherentIVIAttributesDriverCapabilities1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Class_Group_Capabilities</Name>
               <Location>InherentIVIAttributesDriverCapabilities</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050401, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"--READ ONLY-- A comma-separated list of the class capability groups implemented by the driver.  Capability group names are documented in the IVI class specifications.  If the driver is not class compliant, the driver returns an empty string."</Description>
            </Property>
            <Property>
               <Name>Supported_Instrument_Models</Name>
               <Location>InherentIVIAttributesDriverCapabilities</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050327, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"--READ ONLY-- A comma-separated list of instrument models that the IVI specific driver can control.  The string does not include an abbreviation for the manufacturer if it is the same for all models."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>InherentIVIAttributesDriverIdentification</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InherentIVIAttributesDriverIdentification1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Specific_Driver_Class_Spec_Major_Version</Name>
               <Location>InherentIVIAttributesDriverIdentification</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1050515);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Returns the major version number of the class specification in accordance with which the IVI specific driver was developed. Zero is returned if the driver is not compliant with a class specification."</Description>
            </Property>
            <Property>
               <Name>Specific_Driver_Class_Spec_Minor_Version</Name>
               <Location>InherentIVIAttributesDriverIdentification</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1050516);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Returns the minor version number of the class specification in accordance with which the IVI specific driver was developed. Zero is returned if the driver is not compliant with a class specification."</Description>
            </Property>
            <Property>
               <Name>Specific_Driver_Description</Name>
               <Location>InherentIVIAttributesDriverIdentification</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050514, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Returns a brief description of the IVI specific driver. The string that this attribute returns contains a maximum of 256 bytes including the NUL byte."</Description>
            </Property>
            <Property>
               <Name>Specific_Driver_Prefix</Name>
               <Location>InherentIVIAttributesDriverIdentification</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050302, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Returns the case-sensitive prefix of the user-callable functions that the IVI-C specific driver exports. The string that this attribute returns contains a maximum of 32 bytes including the NUL byte."</Description>
            </Property>
            <Property>
               <Name>Specific_Driver_Revision</Name>
               <Location>InherentIVIAttributesDriverIdentification</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050551, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Returns version information about the IVI specific driver. The string that this attribute returns contains a maximum of 256 bytes including the NUL byte."</Description>
            </Property>
            <Property>
               <Name>Specific_Driver_Vendor</Name>
               <Location>InherentIVIAttributesDriverIdentification</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050513, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Returns the name of the vendor that supplies the IVI specific driver. The string that this attribute returns contains a maximum of 256 bytes including the NUL byte."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>InherentIVIAttributesInstrumentIdentification</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InherentIVIAttributesInstrumentIdentification1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Instrument_Firmware_Revision</Name>
               <Location>InherentIVIAttributesInstrumentIdentification</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050510, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"--READ ONLY-- The firmware revision reported by the physical instrument.  If Simulation is enabled or the instrument is not capable of reporting the firmware revision, a string is returned that explains the condition."</Description>
            </Property>
            <Property>
               <Name>Instrument_Manufacturer</Name>
               <Location>InherentIVIAttributesInstrumentIdentification</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050511, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"--READ ONLY-- The name of the manufacturer reported by the physical instrument.  If Simulation is enabled or the instrument is not capable of reporting the name of the manufacturer, a string is returned that explains the condition."</Description>
            </Property>
            <Property>
               <Name>Instrument_Model</Name>
               <Location>InherentIVIAttributesInstrumentIdentification</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050512, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"--READ ONLY-- The model number or name reported by the physical instrument.  If Simulation is enabled or the instrument is not capable of reporting the model number or name, a string is returned that explains the condition.  Model is limited to 256 bytes"</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>InherentIVIAttributesUserOptions</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InherentIVIAttributesUserOptions1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Cache</Name>
               <Location>InherentIVIAttributesUserOptions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1050004);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1050004, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Drivers may choose to always cache some instrument settings, never cache others, and optionally cache others, to avoid unnecessary I/O to the instrument.  If True, the driver caches optionally cached instrument settings."</Description>
            </Property>
            <Property>
               <Name>Interchange_Check</Name>
               <Location>InherentIVIAttributesUserOptions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1050021);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1050021, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"--NOT SUPPORTED-- If True, the driver maintains a record of interchangeability warnings.  If the driver does not support interchangeability checking, attempts to set InterchangeCheck to True return an error."</Description>
            </Property>
            <Property>
               <Name>Query_Instrument_Status</Name>
               <Location>InherentIVIAttributesUserOptions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1050003);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1050003, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"If True, the driver queries the instrument status at the end of each method or property that performs I/O to the instrument.  If an error is reported, use ErrorQuery to retrieve error messages one at a time from the instrument."</Description>
            </Property>
            <Property>
               <Name>Range_Check</Name>
               <Location>InherentIVIAttributesUserOptions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1050002);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1050002, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Drivers may choose to always validate some property/parameter values, never validate others, and optionally validate others, to avoid sending invalid commands to the instrument.  If True, the driver performs optional validations."</Description>
            </Property>
            <Property>
               <Name>Record_Value_Coercions</Name>
               <Location>InherentIVIAttributesUserOptions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1050006);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1050006, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"If True, the driver keeps a list of the value coercions it makes for ViInt32 and ViReal64 attributes.  If the driver does not support coercion recording, attempts to set RecordCoercions to True will return an error."</Description>
            </Property>
            <Property>
               <Name>Simulate</Name>
               <Location>InherentIVIAttributesUserOptions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1050005);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1050005, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"If True, the driver does not perform I/O to the instrument, and returns simulated values for output parameters."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>InstrumentStatus</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentStatus1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Serial_Poll</Name>
               <Location>InstrumentStatus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150054);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"--READ ONLY-- The result of a serial poll of the instrument status byte."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Measurement</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Measurement1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Measurement_Count</Name>
               <Location>Measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150610);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"Attribute that contains the number of Measurements available on the instrument. This is the maximum index that may be used with the GetMeasurementName() function."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>getmeasurementname</Name>
               <Location>Measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Name] = getmeasurementname(obj, Index, NameBufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Name = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'AgInfiniium_GetMeasurementName', session, Index, NameBufferSize, Name);

Name = strtrim(char(Name.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>&#xD;
 This function returns the physical identifier that corresponds to the one-based index that the &#xD;
 user specifies. If the value that the user passes for the Index parameter is less than one or &#xD;
 greater than the value of the corresponding Measurement Count attribute, the function returns&#xD;
 an empty string in the Name parameter and returns an error.&#xD;
 </Description>
            </Method>
            <Method>
               <Name>measurementfunctionname</Name>
               <Location>Measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Name] = measurementfunctionname(obj, RepCapIdentifier, MeasFunction, NameBufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
RepCapIdentifier = [double(RepCapIdentifier) 0];
Name = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'AgInfiniium_MeasurementFunctionName', session, RepCapIdentifier, MeasFunction, NameBufferSize, Name);

Name = strtrim(char(Name.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Returns the name for a given measurement (see AgilentInfiniiumMeasurementEnum).</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>MultiWaveformMeasurement</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="MultiWaveformMeasurement1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Delay_Occurence1</Name>
               <Location>MultiWaveformMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150046);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150046 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The occurrence count for the first waveform source of a generic delay measurement."</Description>
            </Property>
            <Property>
               <Name>Delay_Occurence2</Name>
               <Location>MultiWaveformMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150047);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150047 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The occurrence count for the second waveform source of a generic delay measurement."</Description>
            </Property>
            <Property>
               <Name>Delay_Slope1</Name>
               <Location>MultiWaveformMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150048);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150048 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The polarity of the slope for the first waveform source of a generic delay measurement."</Description>
            </Property>
            <Property>
               <Name>Delay_Slope2</Name>
               <Location>MultiWaveformMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150049);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150049 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The polarity of the slope for the second waveform source of a generic delay measurement."</Description>
            </Property>
            <Property>
               <Name>Source2</Name>
               <Location>MultiWaveformMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150050, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150050 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The second waveform source the oscilloscope uses for dual channel measurements."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>multiwaveformmeasurementconfiguredelay</Name>
               <Location>MultiWaveformMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function multiwaveformmeasurementconfiguredelay(obj, Source2, Slope1, Slope2, DelayOccurence1, DelayOccurence2)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Source2 = [double(Source2) 0];

status = calllib(libname, 'AgInfiniium_MultiWaveformMeasurementConfigureDelay', session, Source2, Slope1, Slope2, DelayOccurence1, DelayOccurence2);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures the edge specifications for the delay measurements.</Description>
            </Method>
            <Method>
               <Name>multiwaveformmeasurementreadactivity</Name>
               <Location>MultiWaveformMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pEdges, pLevels] = multiwaveformmeasurementreadactivity(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
pEdges = libpointer('int32Ptr', 0);
pLevels = libpointer('int32Ptr', 0);

status = calllib(libname, 'AgInfiniium_MultiWaveformMeasurementReadActivity', session, pEdges, pLevels);

pEdges = double(pEdges.Value);
pLevels = double(pLevels.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Reads digital channel activity into the edges and levels parameters. Levels are current logic levels. Edges are active edges since the last ResetActivity() call. In the values read, bit 0 is for digital channel 0, and bit 15 is for digital channel 15.</Description>
            </Method>
            <Method>
               <Name>multiwaveformmeasurementresetactivity</Name>
               <Location>MultiWaveformMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function multiwaveformmeasurementresetactivity(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'AgInfiniium_MultiWaveformMeasurementResetActivity', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Clears the digital channels logic activity registers of the oscilloscope.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>System</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="System1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Date</Name>
               <Location>System</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150056, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150056 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Current date formatted as 'YYYY, MM,DD'. YYYY is a four-digit representation of the year including century and millennium information. MM is a two-digit representation of the month where January is 1 and December is 12. DD is the day of the month."</Description>
            </Property>
            <Property>
               <Name>Serial_Number</Name>
               <Location>System</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150057, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>"--READ ONLY-- Instrument serial number."</Description>
            </Property>
            <Property>
               <Name>Time</Name>
               <Location>System</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150058, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150058 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Current time formatted as 'HH,MM,SS.SSSSS'. HH is the hour and its range is 0 to 23 inclusive. MM is the minute and its range is 0 to 59 inclusive. SS is the second in the range 0 to 59.999."</Description>
            </Property>
            <Property>
               <Name>Timeout_Milliseconds</Name>
               <Location>System</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150059);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150059 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The value, in milliseconds, of the default timeout used by I/O operations. This property provides access to the driver's Visa Session Timeout."</Description>
            </Property>
            <Property>
               <Name>Trace_Enabled</Name>
               <Location>System</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150060);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150060, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"If true, execution tracing is turned on and the driver generates execution trace information using the IVI Event Server. If false, execution tracing is turned off and the driver does not generate trace information."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>systemenablelocalcontrols</Name>
               <Location>System</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function systemenablelocalcontrols(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'AgInfiniium_SystemEnableLocalControls', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Allows an operator to examine and change the instrument's state through its local controls. The client can allow an operator to interact directly with the instrument through its front panel for a period of time.</Description>
            </Method>
            <Method>
               <Name>systemgetscreenbitmap</Name>
               <Location>System</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pBitmap, pBitmapActualSize] = systemgetscreenbitmap(obj, pBitmapBufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
pBitmap = libpointer('int8Ptr', repmat(10, 1, 512));
pBitmapActualSize = libpointer('int32Ptr', 0);

status = calllib(libname, 'AgInfiniium_SystemGetScreenBitmap', session, pBitmapBufferSize, pBitmap, pBitmapActualSize);

pBitmap = strtrim(char(pBitmap.Value));
pBitmapActualSize = double(pBitmapActualSize.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Gets a bitmap snapshot of instrument screen.</Description>
            </Method>
            <Method>
               <Name>systemgetstate</Name>
               <Location>System</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pData, pDataActualSize] = systemgetstate(obj, pDataBufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
pData = libpointer('int8Ptr', repmat(10, 1, 512));
pDataActualSize = libpointer('int32Ptr', 0);

status = calllib(libname, 'AgInfiniium_SystemGetState', session, pDataBufferSize, pData, pDataActualSize);

pData = strtrim(char(pData.Value));
pDataActualSize = double(pDataActualSize.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Saves the binary current instrument state.  The instrument state can be restored using PutState method.  The data is in internal instrument format, do not alter.</Description>
            </Method>
            <Method>
               <Name>systemputstate</Name>
               <Location>System</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function systemputstate(obj, DataBufferSize, Data)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Data = [double(Data) 0];

status = calllib(libname, 'AgInfiniium_SystemPutState', session, DataBufferSize, Data);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Restores binary instrument state as saved by GetState method.</Description>
            </Method>
            <Method>
               <Name>systemread</Name>
               <Location>System</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Value, ActualSize] = systemread(obj, Size)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Value = libpointer('int8Ptr', repmat(10, 1, 512));
ActualSize = libpointer('int32Ptr', 0);

status = calllib(libname, 'AgInfiniium_SystemRead', session, Size, Value, ActualSize);

Value = strtrim(char(Value.Value));
ActualSize = double(ActualSize.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>&#xD;
 This function provides direct read access to the underlying instrument I/O interface.&#xD;
 </Description>
            </Method>
            <Method>
               <Name>systemrecallstate</Name>
               <Location>System</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function systemrecallstate(obj, Identifier)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Identifier = [double(Identifier) 0];

status = calllib(libname, 'AgInfiniium_SystemRecallState', session, Identifier);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Restores the instrument to a state previously stored in the instrument's internal memory.</Description>
            </Method>
            <Method>
               <Name>systemsavestate</Name>
               <Location>System</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function systemsavestate(obj, Identifier)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Identifier = [double(Identifier) 0];

status = calllib(libname, 'AgInfiniium_SystemSaveState', session, Identifier);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Saves the instrument's state in the instrument's internal memory.</Description>
            </Method>
            <Method>
               <Name>systemwaitforoperationcomplete</Name>
               <Location>System</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function systemwaitforoperationcomplete(obj, MaxTimeMilliseconds)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'AgInfiniium_SystemWaitForOperationComplete', session, MaxTimeMilliseconds);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Does not return until previously started operations complete or more                MaxTimeMilliseconds milliseconds of time have expired.</Description>
            </Method>
            <Method>
               <Name>systemwrite</Name>
               <Location>System</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function systemwrite(obj, CommandString)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
CommandString = [double(CommandString) 0];

status = calllib(libname, 'AgInfiniium_SystemWrite', session, CommandString);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function provides direct write access to the underlying instrument I/O interface.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Trigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Trigger_Coupling</Name>
               <Location>Trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250014);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250014 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>5.0</Value>
                     <Value>4.0</Value>
                     <Value>1.0</Value>
                     <Value>3.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"How the oscilloscope couples the trigger source."</Description>
            </Property>
            <Property>
               <Name>Trigger_Holdoff</Name>
               <Location>Trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250016);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250016 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The length of time the oscilloscope waits after it fills the acquisition buffer until the oscilloscope enables the trigger subsystem to detect another trigger.  The units are seconds."</Description>
            </Property>
            <Property>
               <Name>Trigger_Level</Name>
               <Location>Trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250017);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250017 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The voltage threshold for the trigger subsystem.  The units are volts."</Description>
            </Property>
            <Property>
               <Name>Trigger_Modifier</Name>
               <Location>Trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250102);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250102 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                     <Value>3.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The trigger modifier determines the oscilloscope's behavior in the absence of a trigger."</Description>
            </Property>
            <Property>
               <Name>Trigger_Source</Name>
               <Location>Trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1250013, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1250013 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The signal the oscilloscope monitors for a trigger. It can be channel or one of many other values."</Description>
            </Property>
            <Property>
               <Name>Trigger_Type</Name>
               <Location>Trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250012);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250012 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>7.0</Value>
                     <Value>1.0</Value>
                     <Value>5.0</Value>
                     <Value>6.0</Value>
                     <Value>4.0</Value>
                     <Value>3.0</Value>
                     <Value>2.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The kind of event that triggers the oscilloscope."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>TriggerACLineTriggering</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggerACLineTriggering1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>AC_Line_Trigger_Slope</Name>
               <Location>TriggerACLineTriggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250701);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250701 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>3.0</Value>
                     <Value>1.0</Value>
                     <Value>2.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The slope of the zero crossing upon which the scope triggers."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>TriggerEdgeTriggering</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggerEdgeTriggering1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Trigger_Slope</Name>
               <Location>TriggerEdgeTriggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250018);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250018 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The slope, a rising or a falling edge, that triggers the oscilloscope."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>TriggerGlitchTriggering</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggerGlitchTriggering1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Glitch_Condition</Name>
               <Location>TriggerGlitchTriggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250403);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250403 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The glitch condition determines whether the oscilloscope triggers on a pulse with a width less than or greater than the glitch width value."</Description>
            </Property>
            <Property>
               <Name>Glitch_Polarity</Name>
               <Location>TriggerGlitchTriggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250402);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250402 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>2.0</Value>
                     <Value>3.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The polarity of the glitch that triggers the oscilloscope."</Description>
            </Property>
            <Property>
               <Name>Glitch_Width</Name>
               <Location>TriggerGlitchTriggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250401);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250401 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The glitch width.  The units are seconds."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>TriggerPattern</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggerPattern1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Condition</Name>
               <Location>TriggerPattern</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150088);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150088 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The pattern matching condition.  This attribute specifies when the trigger event occurs with respect to the pattern, either trigger on entering the specified pattern or exiting the specified pattern."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>triggerpatternconfigure</Name>
               <Location>TriggerPattern</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function triggerpatternconfigure(obj, AnalogPattern, AnalogMask, DigitalPattern, DigitalMask, MatchingMode)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'AgInfiniium_TriggerPatternConfigure', session, AnalogPattern, AnalogMask, DigitalPattern, DigitalMask, MatchingMode);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures the Pattern trigger.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>TriggerRuntTriggering</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggerRuntTriggering1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Runt_High_Threshold</Name>
               <Location>TriggerRuntTriggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250301);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250301 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The high threshold the oscilloscope uses for runt triggering.  The units are volts."</Description>
            </Property>
            <Property>
               <Name>Runt_Low_Threshold</Name>
               <Location>TriggerRuntTriggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250302);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250302 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The low threshold the oscilloscope uses for runt triggering.  The units are volts."</Description>
            </Property>
            <Property>
               <Name>Runt_Polarity</Name>
               <Location>TriggerRuntTriggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250303);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250303 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>2.0</Value>
                     <Value>3.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The polarity of the runt that triggers the oscilloscope."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>TriggerState</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggerState1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Analog_Mask</Name>
               <Location>TriggerState</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150080);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150080 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The analog channel bits to enable for the pattern matching of the trigger specification."</Description>
            </Property>
            <Property>
               <Name>Analog_Pattern</Name>
               <Location>TriggerState</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150081);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150081 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The analog channel pattern."</Description>
            </Property>
            <Property>
               <Name>Clock_Slope</Name>
               <Location>TriggerState</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150082);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150082 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"Whether a rising or a falling edge triggers the oscilloscope when the user specified pattern on the other channels is present."</Description>
            </Property>
            <Property>
               <Name>Clock_Source</Name>
               <Location>TriggerState</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150083, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150083 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The source the oscilloscope monitors for an edge when the specified pattern is present."</Description>
            </Property>
            <Property>
               <Name>Digital_Mask</Name>
               <Location>TriggerState</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150084);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150084 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The digital channel bits to enable for the pattern matching of the trigger specification."</Description>
            </Property>
            <Property>
               <Name>Digital_Pattern</Name>
               <Location>TriggerState</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150085);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150085 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The digital channel pattern."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>triggerstateconfigure</Name>
               <Location>TriggerState</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function triggerstateconfigure(obj, ClockSource, ClockLevel, ClockSlope, AnalogPattern, AnalogMask, DigitalPattern, DigitalMask)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ClockSource = [double(ClockSource) 0];

status = calllib(libname, 'AgInfiniium_TriggerStateConfigure', session, ClockSource, ClockLevel, ClockSlope, AnalogPattern, AnalogMask, DigitalPattern, DigitalMask);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures the State trigger.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>TriggerTVTriggering</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggerTVTriggering1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>TV_Trigger_Event</Name>
               <Location>TriggerTVTriggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250205);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250205 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>5.0</Value>
                     <Value>4.0</Value>
                     <Value>2.0</Value>
                     <Value>3.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The event on which the oscilloscope triggers."</Description>
            </Property>
            <Property>
               <Name>TV_Trigger_Line_Number</Name>
               <Location>TriggerTVTriggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250206);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250206 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The line on which the oscilloscope triggers.  The line number is absolute and not relative to the field of the TV signal."</Description>
            </Property>
            <Property>
               <Name>TV_Trigger_Polarity</Name>
               <Location>TriggerTVTriggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250204);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250204 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>2.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The polarity of the TV signal."</Description>
            </Property>
            <Property>
               <Name>TV_Trigger_Signal_Format</Name>
               <Location>TriggerTVTriggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250201);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250201 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                     <Value>3.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The format of the TV signal on which the oscilloscope triggers."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>TriggerWidthTriggering</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggerWidthTriggering1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Width_Condition</Name>
               <Location>TriggerWidthTriggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250504);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250504 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The condition of a pulse that triggers the oscilloscope.  The condition is either inside or outside of the high and low thresholds."</Description>
            </Property>
            <Property>
               <Name>Width_High_Threshold</Name>
               <Location>TriggerWidthTriggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250502);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250502 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The high width threshold time.  The units are seconds."</Description>
            </Property>
            <Property>
               <Name>Width_Low_Threshold</Name>
               <Location>TriggerWidthTriggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250501);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250501 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The low width threshold time.  The units are seconds."</Description>
            </Property>
            <Property>
               <Name>Width_Polarity</Name>
               <Location>TriggerWidthTriggering</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1250503);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1250503 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>3.0</Value>
                     <Value>1.0</Value>
                     <Value>2.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The polarity of the pulse that triggers the oscilloscope."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Utility</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Utility1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>clearerror</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function clearerror(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'AgInfiniium_ClearError', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function clears the error code and error description for the current execution thread and for the IVI session. If the user specifies a valid IVI session for the Vi parameter, this function clears the error information for the session. If the user passes VI_NULL for the Vi parameter, this function clears the error information for the current execution thread. If the Vi parameter is an invalid session, the function does nothing and returns an error.</Description>
            </Method>
            <Method>
               <Name>clearinterchangewarnings</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function clearinterchangewarnings(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'AgInfiniium_ClearInterchangeWarnings', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>--NOT SUPPORTED-- Clears the list of interchangeability warnings that the IVI specific driver maintains.</Description>
            </Method>
            <Method>
               <Name>disable</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function disable(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'AgInfiniium_Disable', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Quickly places the instrument in a state where it has no, or minimal, effect on the external system to which it is connected.  This state is not necessarily a known state.</Description>
            </Method>
            <Method>
               <Name>errormessage</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [ErrorMessage] = errormessage(obj, ErrorCode)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ErrorMessage = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'AgInfiniium_error_message', session, ErrorCode, ErrorMessage);

ErrorMessage = strtrim(char(ErrorMessage.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Translates the error return value from an IVI driver function to a user-readable string. The user should pass a buffer with at least 256 bytes for the ErrorMessage parameter.</Description>
            </Method>
            <Method>
               <Name>errorquery</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [ErrorCode, ErrorMessage] = errorquery(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ErrorCode = libpointer('int32Ptr', 0);
ErrorMessage = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'AgInfiniium_error_query', session, ErrorCode, ErrorMessage);

ErrorCode = double(ErrorCode.Value);
ErrorMessage = strtrim(char(ErrorMessage.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Queries the instrument and returns instrument specific error information.  This function can be used when QueryInstrumentStatus is True to retrieve error details when the driver detects an instrument error.</Description>
            </Method>
            <Method>
               <Name>geterror</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [ErrorCode, ErrorDescription] = geterror(obj, ErrorDescriptionBufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ErrorCode = libpointer('int32Ptr', 0);
ErrorDescription = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'AgInfiniium_GetError', session, ErrorCode, ErrorDescriptionBufferSize, ErrorDescription);

ErrorCode = double(ErrorCode.Value);
ErrorDescription = strtrim(char(ErrorDescription.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function retrieves and then clears the IVI error information for the session or the current execution thread. If the user specifies a valid IVI session for the Vi parameter, Get Error retrieves and then clears the error information for the session. If the user passes VI_NULL for the Vi parameter, Get Error retrieves and then clears the error information for the current execution thread. If the Vi parameter is an invalid session, the function does nothing and returns an error. Normally, the error information describes the first error that occurred since the user last called the Get Error or Clear Error function.</Description>
            </Method>
            <Method>
               <Name>getnextcoercionrecord</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [CoercionRecord] = getnextcoercionrecord(obj, CoercionRecordBufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
CoercionRecord = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'AgInfiniium_GetNextCoercionRecord', session, CoercionRecordBufferSize, CoercionRecord);

CoercionRecord = strtrim(char(CoercionRecord.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>--NOT SUPPORTED-- Returns the oldest record from the coercion record list.  Records are only added to the list if RecordCoercions is True.</Description>
            </Method>
            <Method>
               <Name>getnextinterchangewarning</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [InterchangeWarning] = getnextinterchangewarning(obj, InterchangeWarningBufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
InterchangeWarning = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'AgInfiniium_GetNextInterchangeWarning', session, InterchangeWarningBufferSize, InterchangeWarning);

InterchangeWarning = strtrim(char(InterchangeWarning.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>--NOT SUPPORTED-- Returns the oldest warning from the interchange warning list.  Records are only added to the list if InterchangeCheck is True.</Description>
            </Method>
            <Method>
               <Name>invalidateallattributes</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function invalidateallattributes(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'AgInfiniium_InvalidateAllAttributes', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Invalidates all of the driver's cached values.</Description>
            </Method>
            <Method>
               <Name>isinvalidwfmelement</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [IsInvalid] = isinvalidwfmelement(obj, ElementValue)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
IsInvalid = libpointer('uint16Ptr', 0);

status = calllib(libname, 'AgInfiniium_IsInvalidWfmElement', session, ElementValue, IsInvalid);

IsInvalid = double(IsInvalid.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Returns False if an element in a waveform array returned by the driver contains a valid voltage.  Returns True if an element in a waveform array returned by the driver contains a value indicating that the oscilloscope could not sample a voltage.</Description>
            </Method>
            <Method>
               <Name>locksession</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [CallerHasLock] = locksession(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
CallerHasLock = libpointer('uint16Ptr', 0);

status = calllib(libname, 'AgInfiniium_LockSession', session, CallerHasLock);

CallerHasLock = double(CallerHasLock.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Obtains a multithread lock on the driver after waiting until all other execution threads have released their locks on the instrument session.</Description>
            </Method>
            <Method>
               <Name>reset</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function reset(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'AgInfiniium_reset', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Places the instrument in a known state and configures instrument options on which the IVI specific driver depends (for example, enabling/disabling headers).  For an IEEE 488.2 instrument, Reset sends the command string *RST to the instrument.</Description>
            </Method>
            <Method>
               <Name>resetinterchangecheck</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function resetinterchangecheck(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'AgInfiniium_ResetInterchangeCheck', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>--NOT SUPPORTED-- Resets the interchangeability checking algorithms of the driver so that methods and properties that executed prior to calling this function have no affect on whether future calls to the driver generate interchangeability warnings.</Description>
            </Method>
            <Method>
               <Name>resetwithdefaults</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function resetwithdefaults(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'AgInfiniium_ResetWithDefaults', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Does the equivalent of Reset and then, (1) disables class extension capability groups, (2) sets attributes to initial values defined by class specs, and (3) configures the driver to option string settings used when Initialize was last executed.</Description>
            </Method>
            <Method>
               <Name>revisionquery</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [DriverRev, InstrRev] = revisionquery(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
DriverRev = libpointer('int8Ptr', repmat(10, 1, 512));
InstrRev = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'AgInfiniium_revision_query', session, DriverRev, InstrRev);

DriverRev = strtrim(char(DriverRev.Value));
InstrRev = strtrim(char(InstrRev.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Retrieves revision information from the instrument.</Description>
            </Method>
            <Method>
               <Name>selftest</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [TestResult, TestMessage] = selftest(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
TestResult = libpointer('int16Ptr', 0);
TestMessage = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'AgInfiniium_self_test', session, TestResult, TestMessage);

TestResult = double(TestResult.Value);
TestMessage = strtrim(char(TestMessage.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Performs an instrument self test, waits for the instrument to complete the test, and queries the instrument for the results.  If the instrument passes the test, TestResult is zero and TestMessage is 'Self test passed'.</Description>
            </Method>
            <Method>
               <Name>unlocksession</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [CallerHasLock] = unlocksession(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
CallerHasLock = libpointer('uint16Ptr', 0);

status = calllib(libname, 'AgInfiniium_UnlockSession', session, CallerHasLock);

CallerHasLock = double(CallerHasLock.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Releases a previously obtained mutlithread lock.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>WaveformAcquisition</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="WaveformAcquisition1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>readminmaxwaveform</Name>
               <Location>WaveformAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [MinWaveform, MaxWaveform, ActualPoints, InitialX, XIncrement] = readminmaxwaveform(obj, Channel, WaveformSize, MaxTimeMilliseconds, MinWaveform, MaxWaveform)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
MinWaveform = libpointer('doublePtr', MinWaveform);
MaxWaveform = libpointer('doublePtr', MaxWaveform);
ActualPoints = libpointer('int32Ptr', 0);
InitialX = libpointer('doublePtr', 0);
XIncrement = libpointer('doublePtr', 0);

status = calllib(libname, 'AgInfiniium_ReadMinMaxWaveform', session, Channel, WaveformSize, MaxTimeMilliseconds, MinWaveform, MaxWaveform, ActualPoints, InitialX, XIncrement);

MinWaveform = double(MinWaveform.Value);
MaxWaveform = double(MaxWaveform.Value);
ActualPoints = double(ActualPoints.Value);
InitialX = double(InitialX.Value);
XIncrement = double(XIncrement.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Initiates an acquisition on all enabled channels, waits (up to MaxTime) for the acquisition to complete, and returns the min/max waveforms for this channel.  Call FetchMinMaxWaveform to obtain the min/max waveforms for other channels.</Description>
            </Method>
            <Method>
               <Name>readwaveform</Name>
               <Location>WaveformAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, ActualPoints, InitialX, XIncrement] = readwaveform(obj, Channel, WaveformSize, MaxTimeMilliseconds, WaveformArray)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
WaveformArray = libpointer('doublePtr', WaveformArray);
ActualPoints = libpointer('int32Ptr', 0);
InitialX = libpointer('doublePtr', 0);
XIncrement = libpointer('doublePtr', 0);

status = calllib(libname, 'AgInfiniium_ReadWaveform', session, Channel, WaveformSize, MaxTimeMilliseconds, WaveformArray, ActualPoints, InitialX, XIncrement);

WaveformArray = double(WaveformArray.Value);
ActualPoints = double(ActualPoints.Value);
InitialX = double(InitialX.Value);
XIncrement = double(XIncrement.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Initiates an acquisition on all enabled channels, waits (up to MaxTime) for the acquisition to complete, and returns the waveform for this channel.  Call FetchWaveform to obtain the waveforms for other channels.</Description>
            </Method>
            <Method>
               <Name>readwaveformmeasurement</Name>
               <Location>WaveformAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Measurement] = readwaveformmeasurement(obj, Channel, MeasFunction, MaxTimeMilliseconds)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
Measurement = libpointer('doublePtr', 0);

status = calllib(libname, 'AgInfiniium_ReadWaveformMeasurement', session, Channel, MeasFunction, MaxTimeMilliseconds, Measurement);

Measurement = double(Measurement.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Initiates an acquisition on all enabled channels, waits (up to MaxTime) for the acquisition to complete, and returns the measurement for this channel.  Call FetchWaveformMeasurement to obtain other measurements for this or other channels.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>WaveformAcquisitionLowLevelAcquisition</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="WaveformAcquisitionLowLevelAcquisition1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>abort</Name>
               <Location>WaveformAcquisitionLowLevelAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function abort(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'AgInfiniium_Abort', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Aborts an acquisition and returns the oscilloscope to the Idle state.</Description>
            </Method>
            <Method>
               <Name>acquisitionstatus</Name>
               <Location>WaveformAcquisitionLowLevelAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Status] = acquisitionstatus(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Status = libpointer('int32Ptr', 0);

status = calllib(libname, 'AgInfiniium_AcquisitionStatus', session, Status);

Status = double(Status.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Returns whether an acquisition is in progress, complete, or if the status is unknown.</Description>
            </Method>
            <Method>
               <Name>fetchminmaxwaveform</Name>
               <Location>WaveformAcquisitionLowLevelAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [MinWaveform, MaxWaveform, ActualPoints, InitialX, XIncrement] = fetchminmaxwaveform(obj, Channel, WaveformSize, MinWaveform, MaxWaveform)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
MinWaveform = libpointer('doublePtr', MinWaveform);
MaxWaveform = libpointer('doublePtr', MaxWaveform);
ActualPoints = libpointer('int32Ptr', 0);
InitialX = libpointer('doublePtr', 0);
XIncrement = libpointer('doublePtr', 0);

status = calllib(libname, 'AgInfiniium_FetchMinMaxWaveform', session, Channel, WaveformSize, MinWaveform, MaxWaveform, ActualPoints, InitialX, XIncrement);

MinWaveform = double(MinWaveform.Value);
MaxWaveform = double(MaxWaveform.Value);
ActualPoints = double(ActualPoints.Value);
InitialX = double(InitialX.Value);
XIncrement = double(XIncrement.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Returns the previously acquired minimum and maximum waveforms for this specified channel.  The acquisition must be made prior to calling this method. Call this method separately for each channel.</Description>
            </Method>
            <Method>
               <Name>fetchwaveform</Name>
               <Location>WaveformAcquisitionLowLevelAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [WaveformArray, ActualPoints, InitialX, XIncrement] = fetchwaveform(obj, Channel, WaveformSize, WaveformArray)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
WaveformArray = libpointer('doublePtr', WaveformArray);
ActualPoints = libpointer('int32Ptr', 0);
InitialX = libpointer('doublePtr', 0);
XIncrement = libpointer('doublePtr', 0);

status = calllib(libname, 'AgInfiniium_FetchWaveform', session, Channel, WaveformSize, WaveformArray, ActualPoints, InitialX, XIncrement);

WaveformArray = double(WaveformArray.Value);
ActualPoints = double(ActualPoints.Value);
InitialX = double(InitialX.Value);
XIncrement = double(XIncrement.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Returns a previously acquired waveform for this channel. The acquisition must be made prior to calling this method.  Call this method separately for each channel.</Description>
            </Method>
            <Method>
               <Name>fetchwaveformmeasurement</Name>
               <Location>WaveformAcquisitionLowLevelAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Measurement] = fetchwaveformmeasurement(obj, Channel, MeasFunction)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Channel = [double(Channel) 0];
Measurement = libpointer('doublePtr', 0);

status = calllib(libname, 'AgInfiniium_FetchWaveformMeasurement', session, Channel, MeasFunction, Measurement);

Measurement = double(Measurement.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Returns a previously acquired waveform measurement for this channel.  The acquisition must be made prior to calling this method.  Call this method separately for each measurement.</Description>
            </Method>
            <Method>
               <Name>initiateacquisition</Name>
               <Location>WaveformAcquisitionLowLevelAcquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function initiateacquisition(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'AgInfiniium_InitiateAcquisition', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'AgInfiniium_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Initiates a waveform acquisition.  The oscilloscope leaves the Idle state and waits for a trigger.  The oscilloscope acquires a waveform for each enabled channel.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>WaveformMeasurement</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="WaveformMeasurement1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Measurement_High_Reference</Name>
               <Location>WaveformMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250607);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250607 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The high reference for waveform measurements.  It is a percentage of the difference between the Voltage High and Voltage Low.  Voltage High and Voltage Low may be calculated using either the min/max or histogram methods."</Description>
            </Property>
            <Property>
               <Name>Measurement_Low_Reference</Name>
               <Location>WaveformMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250608);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250608 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The low reference for waveform measurements.  It is a percentage of the difference between the Voltage High and Voltage Low.  Voltage High and Voltage Low may be calculated using either the min/max or histogram methods."</Description>
            </Property>
            <Property>
               <Name>Measurement_Middle_Reference</Name>
               <Location>WaveformMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1250609);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1250609 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>"The mid reference for waveform measurements.  It is a percentage of the difference between the Voltage High and Voltage Low.  Voltage High and Voltage Low may be calculated using either the min/max or histogram methods."</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
   </GroupInfo>
</MATLABInstrumentDriver>