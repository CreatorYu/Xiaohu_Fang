<?xml version="1.0" encoding="utf-8"?>
<MATLABInstrumentDriver>
   <FileVersion>2.43</FileVersion>
   <DriverName>Agilent546XX.Agilent546XX</DriverName>
   <DriverType>MATLAB IVI-COM</DriverType>
   <InstrumentType>IAgilent546XX</InstrumentType>
   <InstrumentManufacturer>Manufacturer</InstrumentManufacturer>
   <InstrumentModel>Model</InstrumentModel>
   <InstrumentVersion>1.0</InstrumentVersion>
   <Identify>*IDN?</Identify>
   <Reset>*RST</Reset>
   <Selftest>*TST?</Selftest>
   <Error>System:Error?</Error>
   <CreateInitCode>
      <Code>function init(obj)
% This function is called after the object is created.
% OBJ is the device object.
% End of function definition - DO NOT EDIT
ictver = ver('instrument');
splittedVer = regexp (ictver.Version , '\.', 'split');
if (~isempty(splittedVer) &amp;&amp; (str2num(char(splittedVer(1))) &lt; 2 || (str2num(char(splittedVer(1))) == 2 &amp;&amp; str2num(char(splittedVer(2))) &lt;= 6)))
   error('instrument:icdevice:newerdriver','This driver requires Instrument Control ToolBox version 2.7.0 (R2008B) or later');
end
</Code>
   </CreateInitCode>
   <ConnectInitCode>
      <Type>MCode</Type>
      <Code>function init(obj)
% This function is called after the object is connected.
% OBJ is the device object.
% End of function definition - DO NOT EDIT

% NOTE: This code is required to support driver interfaces that are collections.
%       Deleting or altering this code may prevent device objects using this
%       driver from operating correctly.

comobj = get(obj, 'Interface');

collection = comobj;
collection = get(collection, 'Channels');
instrgate('privateIviComDriverHelper', 'group', obj, collection, 'Channels');

collection = comobj;
collection = get(collection, 'DigitalChannels');
instrgate('privateIviComDriverHelper', 'group', obj, collection, 'Digitalchannels');

collection = comobj;
collection = get(collection, 'Measurements');
instrgate('privateIviComDriverHelper', 'group', obj, collection, 'Measurements');

</Code>
   </ConnectInitCode>
   <CleanupCode>
      <Type>InstrumentCommand</Type>
   </CleanupCode>
   <GroupInfo>
      <Group>
         <Name>parent</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="parent1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Initialized</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Interface;
	propertyValue = comobj.Initialized;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Initialized is True between a successful call to the Initialize method and a successful call to the Close method, and False at all other times.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Close</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Close(obj)

comobj = obj.Interface;
feature('COM_SafeArraySingleDim',1);
comobj.Close();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Closes the I/O session to the instrument.  Driver methods and properties that access the instrument are not accessible after Close is called.</Description>
            </Method>
            <Method>
               <Name>Initialize</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Initialize(obj, ResourceName, IdQuery, Reset, OptionString)

comobj = obj.Interface;
feature('COM_SafeArraySingleDim',1);
comobj.Initialize(ResourceName, IdQuery, Reset, OptionString);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Opens the I/O session to the instrument.  Driver methods and properties that access the instrument are only accessible after Initialize is called.  Initialize optionally performs a Reset and queries the instrument to validate the instrument model.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Acquisition</Name>
         <Description>IAgilent546XX instrument-specific acquisition interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Acquisition1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>AcquisitionType</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	propertyValue = comobj.Type;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	comobj.Type = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent546XXAcquisitionTypeNormal" Value="Agilent546XXAcquisitionTypeNormal"/>
                     <Enum Name="Agilent546XXAcquisitionTypePeakDetect" Value="Agilent546XXAcquisitionTypePeakDetect"/>
                     <Enum Name="Agilent546XXAcquisitionTypeHiRes" Value="Agilent546XXAcquisitionTypeHiRes"/>
                     <Enum Name="Agilent546XXAcquisitionTypeEnvelope" Value="Agilent546XXAcquisitionTypeEnvelope"/>
                     <Enum Name="Agilent546XXAcquisitionTypeAverage" Value="Agilent546XXAcquisitionTypeAverage"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Specifies how the oscilloscope acquires data and fills the waveform record.</Description>
            </Property>
            <Property>
               <Name>Interpolation</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	propertyValue = comobj.Interpolation;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	comobj.Interpolation = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent546XXInterpolationNone" Value="Agilent546XXInterpolationNone"/>
                     <Enum Name="Agilent546XXInterpolationSineX" Value="Agilent546XXInterpolationSineX"/>
                     <Enum Name="Agilent546XXInterpolationLinear" Value="Agilent546XXInterpolationLinear"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The interpolation method the oscilloscope uses when it can not resolve a voltage for every point in the waveform record.</Description>
            </Property>
            <Property>
               <Name>NumberOfAverages</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	propertyValue = comobj.NumberOfAverages;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	comobj.NumberOfAverages = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The number of values (in averaging mode) to be averaged for each time bucket before the acquisition is considered to be complete for that time bucket.  The count can be set to any value from 1 (smoothing) to 16383.</Description>
            </Property>
            <Property>
               <Name>NumberOfEnvelopes</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	propertyValue = comobj.NumberOfEnvelopes;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	comobj.NumberOfEnvelopes = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The number of waveforms the oscilloscope acquires and analyzes to create the minimum and maximum waveforms, before returning to the idle state.  Applies only when acquisition Type is Envelope.</Description>
            </Property>
            <Property>
               <Name>NumberOfPointsMin</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	propertyValue = comobj.NumberOfPointsMin;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	comobj.NumberOfPointsMin = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The minimum number of points required in the waveform record for each channel.</Description>
            </Property>
            <Property>
               <Name>RecordLength</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	propertyValue = comobj.RecordLength;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The actual number of points the oscilloscope acquires for each channel.</Description>
            </Property>
            <Property>
               <Name>SampleMode</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	propertyValue = comobj.SampleMode;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent546XXSampleModeRealTime" Value="Agilent546XXSampleModeRealTime"/>
                     <Enum Name="Agilent546XXSampleModeEquivalentTime" Value="Agilent546XXSampleModeEquivalentTime"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The sample mode the oscilloscope is currently using.</Description>
            </Property>
            <Property>
               <Name>SampleRate</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	propertyValue = comobj.SampleRate;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the current oscilloscope acquisition sample rate in samples/sec. The sample rate is not directly controllable.</Description>
            </Property>
            <Property>
               <Name>StartTime</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	propertyValue = comobj.StartTime;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	comobj.StartTime = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The length of time from the trigger event to the first point in the waveform record in seconds.</Description>
            </Property>
            <Property>
               <Name>TimePerRecord</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	propertyValue = comobj.TimePerRecord;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Acquisition;
	comobj.TimePerRecord = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The length of time in seconds that corresponds to the record length.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>ConfigureRecord</Name>
               <Location>Acquisition</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ConfigureRecord(obj, TimePerRecord, NumberOfPointsMin, StartTime)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Acquisition;
feature('COM_SafeArraySingleDim',1);
comobj.ConfigureRecord(double(TimePerRecord), int32(NumberOfPointsMin), double(StartTime));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the most commonly configured attributes of the oscilloscope acquisition sub-system.  These attributes are the time per record, minimum record length, and the acquisition start time.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Channel</Name>
         <Description>IAgilent546XX instrument-specific channel collection interface (which provides access to the channel interface objects).</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Channel1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Coupling</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Coupling;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Coupling = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent546XXVerticalCouplingAC" Value="Agilent546XXVerticalCouplingAC"/>
                     <Enum Name="Agilent546XXVerticalCouplingDC" Value="Agilent546XXVerticalCouplingDC"/>
                     <Enum Name="Agilent546XXVerticalCouplingGnd" Value="Agilent546XXVerticalCouplingGnd"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>How the oscilloscope couples the input signal for the channel.</Description>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Enabled;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>If True, the oscilloscope acquires a waveform for the channel.</Description>
            </Property>
            <Property>
               <Name>InputFrequencyMax</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.InputFrequencyMax;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.InputFrequencyMax = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The maximum frequency for the input signal before attenuating it by more than 3 dB.</Description>
            </Property>
            <Property>
               <Name>InputImpedance</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.InputImpedance;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.InputImpedance = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The input impedance for the channel in Ohms.</Description>
            </Property>
            <Property>
               <Name>Invert</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Invert;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Invert = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>If True, the oscilloscope displays the waveform inverted for the channel.</Description>
            </Property>
            <Property>
               <Name>Label</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Label;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Label = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The label to be displayed for a specific channel when such labels are enabled.</Description>
            </Property>
            <Property>
               <Name>Offset</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Offset;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Offset = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The location of the center of the range that the Vertical Range attribute specifies for the selected channel.  The value is with respect to ground and is in volts.</Description>
            </Property>
            <Property>
               <Name>ProbeAttenuation</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.ProbeAttenuation;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.ProbeAttenuation = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The attenuation factor of the connected probe.   If the oscilloscope is auto sensing the probe attenuation, setting this attribute to a positive value configures the oscilloscope to use the specified manual probe attenuation.</Description>
            </Property>
            <Property>
               <Name>ProbeSense</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.ProbeSense;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The probe attenuation value that the oscilloscope automatically senses.</Description>
            </Property>
            <Property>
               <Name>ProbeSkew</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.ProbeSkew;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.ProbeSkew = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The skew factor (in seconds) that the probe is delaying the signal as it propagates through the probe</Description>
            </Property>
            <Property>
               <Name>Protection</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Protection;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent546XXChannelProtectionOK" Value="Agilent546XXChannelProtectionOK"/>
                     <Enum Name="Agilent546XXChannelProtectionTripped" Value="Agilent546XXChannelProtectionTripped"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Whether the automatic input voltage overload protection circuit has tripped due to an overload condition at the input.</Description>
            </Property>
            <Property>
               <Name>Range</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Range;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Range = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The absolute value in Volts of the full-scale input range for a channel.</Description>
            </Property>
            <Property>
               <Name>Units</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Units;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Units = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent546XXVolts" Value="Agilent546XXVolts"/>
                     <Enum Name="Agilent546XXAmps" Value="Agilent546XXAmps"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The units used for the channels.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>ClearProtection</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ClearProtection(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
comobj.ClearProtection();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Clears a tripped input overload condition (if the overload condition has been removed).</Description>
            </Method>
            <Method>
               <Name>Configure</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Range, Offset, Coupling, ProbeAttenuation, Enabled)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
comobj.Configure(double(Range), double(Offset), Coupling, double(ProbeAttenuation), Enabled);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the most common properties of the channel (range, offset, coupling, probe attenuation, and enable) at once.</Description>
            </Method>
            <Method>
               <Name>ConfigureCharacteristics</Name>
               <Location>Channel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ConfigureCharacteristics(obj, InputImpedance, InputFrequencyMax)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
comobj.ConfigureCharacteristics(double(InputImpedance), double(InputFrequencyMax));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the attributes that control the electrical characteristics of the channel.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Channels</Name>
         <Description>IAgilent546XX instrument-specific channel collection interface (which provides access to the channel interface objects).</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Channels1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Count</Name>
               <Location>Channels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Channels;
	propertyValue = comobj.Count;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The total number of Channel interfaces available.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Item</Name>
               <Location>Channels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [val] = Item(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Item(Name, varargin{:});
end
[val] = comobj.Item(Name);
</MCode>
               </Code>
               <Description>The channel interface object for the named channel.It is the name of an instance of this repeated capability. It may be either a physical name as returned by the Name property or a virtual name mapped to a repeated capability instance in a driver session </Description>
            </Method>
            <Method>
               <Name>Name</Name>
               <Location>Channels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [val] = Name(obj, Index, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Channels;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Name(int32(Index), varargin{:});
end
[val] = comobj.Name(int32(Index));
</MCode>
               </Code>
               <Description>The name of a particular channel, given its zero-indexed number.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ConfigurableMeasurement</Name>
         <Description>IAgilent546XX instrument-specific configurable-measurement interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ConfigurableMeasurement1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>TimeAtEdgeOccurrence</Name>
               <Location>ConfigurableMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ConfigurableMeasurement;
	propertyValue = comobj.TimeAtEdgeOccurrence;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ConfigurableMeasurement;
	comobj.TimeAtEdgeOccurrence = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The occurrence count for the TimeAtEdge measurement. Can use the following SCPI for getter: :MEASure:TEDGe?&lt;slope&gt;&lt;occurrence&gt;</Description>
            </Property>
            <Property>
               <Name>TimeAtEdgeSlope</Name>
               <Location>ConfigurableMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ConfigurableMeasurement;
	propertyValue = comobj.TimeAtEdgeSlope;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ConfigurableMeasurement;
	comobj.TimeAtEdgeSlope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent546XXMeasurementSlopePositive" Value="Agilent546XXMeasurementSlopePositive"/>
                     <Enum Name="Agilent546XXMeasurementSlopeNegative" Value="Agilent546XXMeasurementSlopeNegative"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The edge slope for a TimeAtEdge measurement. Can use the following SCPI for getter: :MEASure:TEDGe?&lt;slope&gt;&lt;occurrence&gt;</Description>
            </Property>
            <Property>
               <Name>TimeAtValueOccurrence</Name>
               <Location>ConfigurableMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ConfigurableMeasurement;
	propertyValue = comobj.TimeAtValueOccurrence;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ConfigurableMeasurement;
	comobj.TimeAtValueOccurrence = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The occurrence count for the TimeAtValue measurement measurement. Can use :MEASure:TVALue? &lt;value&gt; for getter</Description>
            </Property>
            <Property>
               <Name>TimeAtValueSlope</Name>
               <Location>ConfigurableMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ConfigurableMeasurement;
	propertyValue = comobj.TimeAtValueSlope;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ConfigurableMeasurement;
	comobj.TimeAtValueSlope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent546XXMeasurementSlopePositive" Value="Agilent546XXMeasurementSlopePositive"/>
                     <Enum Name="Agilent546XXMeasurementSlopeNegative" Value="Agilent546XXMeasurementSlopeNegative"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The edge slope for a TimeAtValue measurement. Can use :MEASure:TVALue? &lt;value&gt; for getter</Description>
            </Property>
            <Property>
               <Name>TimeAtValueValue</Name>
               <Location>ConfigurableMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ConfigurableMeasurement;
	propertyValue = comobj.TimeAtValueValue;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ConfigurableMeasurement;
	comobj.TimeAtValueValue = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The voltage for the TimeAtValue measurement. :MEASure:TVALue? &lt;value&gt; can be used for getter</Description>
            </Property>
            <Property>
               <Name>ValueAtTimeTime</Name>
               <Location>ConfigurableMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ConfigurableMeasurement;
	propertyValue = comobj.ValueAtTimeTime;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ConfigurableMeasurement;
	comobj.ValueAtTimeTime = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The time (in seconds) used to make the ValueAtTime measurement.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Cursors</Name>
         <Description>IAgilent546XX instrument-specific on-screen cursors interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Cursors1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Enabled</Name>
               <Location>Cursors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors;
	propertyValue = comobj.Enabled;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors;
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>If True, the oscilloscope displays cursors.</Description>
            </Property>
            <Property>
               <Name>X1Position</Name>
               <Location>Cursors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors;
	propertyValue = comobj.X1Position;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors;
	comobj.X1Position = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The X1 Cursor position.  The units are seconds.</Description>
            </Property>
            <Property>
               <Name>X1Y1Source</Name>
               <Location>Cursors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors;
	propertyValue = comobj.X1Y1Source;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors;
	comobj.X1Y1Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The source the oscilloscope uses for the X1Y1 cursors.  NOTE: Setting the source for one pair also sets the source for the other; in other words, the supported oscilloscopes do not allow independent setting of the X1Y1 and X2Y2 cursors' sources.</Description>
            </Property>
            <Property>
               <Name>X2Position</Name>
               <Location>Cursors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors;
	propertyValue = comobj.X2Position;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors;
	comobj.X2Position = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The X2 Cursor position.  The units are seconds.</Description>
            </Property>
            <Property>
               <Name>X2Y2Source</Name>
               <Location>Cursors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors;
	propertyValue = comobj.X2Y2Source;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors;
	comobj.X2Y2Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The source the oscilloscope uses for the X2Y2 cursors.  NOTE: Setting the source for one pair also sets the source for the other; in other words, the supported oscilloscopes do not allow independent setting of the X1Y1 and X2Y2 cursors' sources.</Description>
            </Property>
            <Property>
               <Name>Y1Position</Name>
               <Location>Cursors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors;
	propertyValue = comobj.Y1Position;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors;
	comobj.Y1Position = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The Y1 Cursor position.  The units are seconds.</Description>
            </Property>
            <Property>
               <Name>Y2Position</Name>
               <Location>Cursors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors;
	propertyValue = comobj.Y2Position;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Cursors;
	comobj.Y2Position = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The Y2 Cursor position.  The units are seconds.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>DigitalChannel</Name>
         <Description>IAgilent546XX instrument-specific digital channel collection interface (which provides access to the digital channel interface objects).</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="DigitalChannel1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Enabled</Name>
               <Location>DigitalChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalChannels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Enabled;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalChannels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Enabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>If True, the oscilloscope acquires a waveform for the specified digital channel.</Description>
            </Property>
            <Property>
               <Name>Label</Name>
               <Location>DigitalChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalChannels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Label;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalChannels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Label = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The label that the oscilloscope displays for the specified digital channel.</Description>
            </Property>
            <Property>
               <Name>Threshold</Name>
               <Location>DigitalChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalChannels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	propertyValue = comobj.Threshold;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalChannels;
	name = comobj.Name(obj.HwIndex);
	comobj = comobj.Item(name);
	comobj.Threshold = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The threshold for the pod (digital channels 0-7 or 8-15) containing the specified digital channel.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>FetchDigitalWaveform</Name>
               <Location>DigitalChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pWaveformArray, pInitialX, pXIncrement] = FetchDigitalWaveform(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DigitalChannels;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[pWaveformArray, pInitialX, pXIncrement] = comobj.FetchDigitalWaveform([0;0], 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns the waveform for the pod (digital channels 0-7 or 8-15) containing the specified digital channel.</Description>
            </Method>
            <Method>
               <Name>ReadDigitalWaveform</Name>
               <Location>DigitalChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pWaveformArray, pInitialX, pXIncrement] = ReadDigitalWaveform(obj, MaxTime, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DigitalChannels;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[pWaveformArray, pInitialX, pXIncrement] = comobj.ReadDigitalWaveform(MaxTime, [0;0], 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Acquires and returns the waveform for the pod (digital channels 0-7 or 8-15) containing the specified digital channel.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>DigitalChannels</Name>
         <Description>IAgilent546XX instrument-specific digital channel collection interface (which provides access to the digital channel interface objects).</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="DigitalChannels1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Count</Name>
               <Location>DigitalChannels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DigitalChannels;
	propertyValue = comobj.Count;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The total number of DigitalChannel interfaces available.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Item</Name>
               <Location>DigitalChannels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [val] = Item(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DigitalChannels;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Item(Name, varargin{:});
end
[val] = comobj.Item(Name);
</MCode>
               </Code>
               <Description>The digital channel interface object for the named digital channel.It is the name of an instance of this repeated capability. It may be either a physical name as returned by the Name property or a virtual name mapped to a repeated capability instance in a</Description>
            </Method>
            <Method>
               <Name>Name</Name>
               <Location>DigitalChannels</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [val] = Name(obj, Index, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DigitalChannels;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Name(int32(Index), varargin{:});
end
[val] = comobj.Name(int32(Index));
</MCode>
               </Code>
               <Description>The name of a particular channel, given its zero-indexed number.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Display</Name>
         <Description>Agilent546XX Display interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Display1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>LabelEnabled</Name>
               <Location>Display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display;
	propertyValue = comobj.LabelEnabled;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display;
	comobj.LabelEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>If True, the oscilloscope displays labels for all channels.</Description>
            </Property>
            <Property>
               <Name>Persistence</Name>
               <Location>Display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display;
	propertyValue = comobj.Persistence;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display;
	comobj.Persistence = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>If True, the persistence mode of the oscilloscope display is turned on.</Description>
            </Property>
            <Property>
               <Name>PersistTime</Name>
               <Location>Display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display;
	propertyValue = comobj.PersistTime;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Display;
	comobj.PersistTime = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The persistence time in seconds.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>Display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, PersistTime)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Display;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(double(PersistTime));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the display persistence.</Description>
            </Method>
            <Method>
               <Name>Erase</Name>
               <Location>Display</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Erase(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Display;
feature('COM_SafeArraySingleDim',1);
comobj.Erase();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Clears the display and resets all associated measurements.  If the oscilloscope is stopped, all currently displayed data is erased.  If the oscilloscope is running, all the data in active channels and functions is erased.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>DriverOperation</Name>
         <Description>IVI Driver operation interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="DriverOperation1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Cache</Name>
               <Location>DriverOperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	propertyValue = comobj.Cache;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	comobj.Cache = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>If True, the driver caches instrument settings to avoid unnecessary I/O to the instrument.  The actual settings that are cached are driver-specific.</Description>
            </Property>
            <Property>
               <Name>DriverSetup</Name>
               <Location>DriverOperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	propertyValue = comobj.DriverSetup;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The driver setup string.  It is either specified in the Configuration Store or passed in the OptionString parameter of the Initialize function.  Driver setup is empty if the driver is not initialized.</Description>
            </Property>
            <Property>
               <Name>InterchangeCheck</Name>
               <Location>DriverOperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	propertyValue = comobj.InterchangeCheck;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	comobj.InterchangeCheck = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>If True, the driver maintains a record of interchangeability warnings.  If the driver does not support interchangeability checking, attempts to set InterchangeCheck to True return an error.</Description>
            </Property>
            <Property>
               <Name>IoResourceDescriptor</Name>
               <Location>DriverOperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	propertyValue = comobj.IoResourceDescriptor;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The resource descriptor specifies the connection to a physical device.  It is either specified in the Configuration Store or passed in the ResourceName parameter of the Initialize function.  It is empty if the driver is not initialized.</Description>
            </Property>
            <Property>
               <Name>LogicalName</Name>
               <Location>DriverOperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	propertyValue = comobj.LogicalName;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Logical Name identifies a driver session in the Configuration Store.  If Logical Name is not empty, the driver was initialized from information in the driver session.  If it is empty, the driver was initialized without using the Configuration Store.</Description>
            </Property>
            <Property>
               <Name>QueryInstrumentStatus</Name>
               <Location>DriverOperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	propertyValue = comobj.QueryInstrumentStatus;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	comobj.QueryInstrumentStatus = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>If True, the driver queries the instrument status at the end of each method or property that performs I/O to the instrument.  If an error is reported, use ErrorQuery to retrieve error messages one at a time from the instrument.</Description>
            </Property>
            <Property>
               <Name>RangeCheck</Name>
               <Location>DriverOperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	propertyValue = comobj.RangeCheck;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	comobj.RangeCheck = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>If True, the driver validates property and parameter values to avoid invalid commands to the instrument.  The extent of the validation is driver-specific.</Description>
            </Property>
            <Property>
               <Name>RecordCoercions</Name>
               <Location>DriverOperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	propertyValue = comobj.RecordCoercions;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	comobj.RecordCoercions = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>If True, the driver keeps a list of the value coercions it makes for ViInt32 and ViReal64 attributes.  If the driver does not support coercion recording, attempts to set RecordCoercions to True will return an error.</Description>
            </Property>
            <Property>
               <Name>Simulate</Name>
               <Location>DriverOperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	propertyValue = comobj.Simulate;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.DriverOperation;
	comobj.Simulate = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>If True, the driver does not perform I/O to the instrument, and returns simulated values for output parameters.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>ClearInterchangeWarnings</Name>
               <Location>DriverOperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ClearInterchangeWarnings(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DriverOperation;
feature('COM_SafeArraySingleDim',1);
comobj.ClearInterchangeWarnings();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Clears the list of interchangeability warnings that the IVI specific driver maintains.</Description>
            </Method>
            <Method>
               <Name>GetNextCoercionRecord</Name>
               <Location>DriverOperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [CoercionRecord] = GetNextCoercionRecord(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DriverOperation;
feature('COM_SafeArraySingleDim',1);
[CoercionRecord] = comobj.GetNextCoercionRecord();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns the oldest record from the coercion record list.  Records are only added to the list if RecordCoercions is True.</Description>
            </Method>
            <Method>
               <Name>GetNextInterchangeWarning</Name>
               <Location>DriverOperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [InterchangeWarning] = GetNextInterchangeWarning(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DriverOperation;
feature('COM_SafeArraySingleDim',1);
[InterchangeWarning] = comobj.GetNextInterchangeWarning();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns the oldest warning from the interchange warning list.  Records are only added to the list if InterchangeCheck is True.</Description>
            </Method>
            <Method>
               <Name>InvalidateAllAttributes</Name>
               <Location>DriverOperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function InvalidateAllAttributes(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DriverOperation;
feature('COM_SafeArraySingleDim',1);
comobj.InvalidateAllAttributes();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Invalidates all of the driver's cached values.</Description>
            </Method>
            <Method>
               <Name>ResetInterchangeCheck</Name>
               <Location>DriverOperation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ResetInterchangeCheck(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.DriverOperation;
feature('COM_SafeArraySingleDim',1);
comobj.ResetInterchangeCheck();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Resets the interchangeability checking algorithms of the driver so that methods and properties that executed prior to calling this function have no affect on whether future calls to the driver generate interchangeability warnings.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>External</Name>
         <Description>IAgilent546XX instrument-specific external trigger interface (for controlling external trigger source parameters).</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="External1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>ProbeAttenuation</Name>
               <Location>External</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.External;
	propertyValue = comobj.ProbeAttenuation;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.External;
	comobj.ProbeAttenuation = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The scaling factor by which the probe attached to the external trigger attenuates the input.</Description>
            </Property>
            <Property>
               <Name>ProbeSense</Name>
               <Location>External</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.External;
	propertyValue = comobj.ProbeSense;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The probe attenuation value that the oscilloscope automatically senses.</Description>
            </Property>
            <Property>
               <Name>Units</Name>
               <Location>External</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.External;
	propertyValue = comobj.Units;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.External;
	comobj.Units = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent546XXUnitsVolts" Value="Agilent546XXUnitsVolts"/>
                     <Enum Name="Agilent546XXUnitsAmps" Value="Agilent546XXUnitsAmps"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The units used for the external trigger.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Identity</Name>
         <Description>IVI Driver driver identity interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Identity1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Description</Name>
               <Location>Identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.Description;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>A brief description of the implementing component.  Description is limted to 256 bytes.</Description>
            </Property>
            <Property>
               <Name>GroupCapabilities</Name>
               <Location>Identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.GroupCapabilities;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>A comma-separated list of the class capability groups implemented by the driver.  Capability group names are documented in the IVI class specifications.  If the driver is not class compliant, the driver returns an empty string.</Description>
            </Property>
            <Property>
               <Name>Identifier</Name>
               <Location>Identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.Identifier;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The case-sensitive unique identifier of the implementing IVI-COM instrument driver.</Description>
            </Property>
            <Property>
               <Name>InstrumentFirmwareRevision</Name>
               <Location>Identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.InstrumentFirmwareRevision;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The firmware revision reported by the physical instrument.  If Simulation is enabled or the instrument is not capable of reporting the firmware revision, a string is returned that explains the condition.</Description>
            </Property>
            <Property>
               <Name>InstrumentManufacturer</Name>
               <Location>Identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.InstrumentManufacturer;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The name of the manufacturer reported by the physical instrument.  If Simulation is enabled or the instrument is not capable of reporting the name of the manufacturer, a string is returned that explains the condition. Manufacturer is limited to 256 bytes</Description>
            </Property>
            <Property>
               <Name>InstrumentModel</Name>
               <Location>Identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.InstrumentModel;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The model number or name reported by the physical instrument.  If Simulation is enabled or the instrument is not capable of reporting the model number or name, a string is returned that explains the condition.  Model is limited to 256 bytes</Description>
            </Property>
            <Property>
               <Name>Revision</Name>
               <Location>Identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.Revision;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The revision of the implementing component.  Refer to IVI-3.2, Section 3.1.2.2, for a description of revision syntax and semantics.  Revision is limited to 256 bytes.</Description>
            </Property>
            <Property>
               <Name>SpecificationMajorVersion</Name>
               <Location>Identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.SpecificationMajorVersion;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>For IVI class-compliant drivers, the major version number of the instrument class specification.  If the driver is not class compliant, the driver returns zero.</Description>
            </Property>
            <Property>
               <Name>SpecificationMinorVersion</Name>
               <Location>Identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.SpecificationMinorVersion;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>For IVI class-compliant drivers, the minor version number of the instrument class specification.  If the driver is not class compliant, the driver returns zero.</Description>
            </Property>
            <Property>
               <Name>SupportedInstrumentModels</Name>
               <Location>Identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.SupportedInstrumentModels;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>A comma-separated list of instrument models that the IVI specific driver can control.</Description>
            </Property>
            <Property>
               <Name>Vendor</Name>
               <Location>Identity</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Identity;
	propertyValue = comobj.Vendor;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The name of the vendor that supplies the implementing component.  Vendor is limited to 256 bytes.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>InstrumentStatus</Name>
         <Description>Agilent546XX Status interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentStatus1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>SerialPoll</Name>
               <Location>InstrumentStatus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Status;
	propertyValue = comobj.SerialPoll;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The results of a serial poll of the instrument status byte.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Clear</Name>
               <Location>InstrumentStatus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Clear(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Status;
feature('COM_SafeArraySingleDim',1);
comobj.Clear();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Clears all event registers and error queue. The enable registers are unaffected.</Description>
            </Method>
            <Method>
               <Name>ConfigureServiceRequest</Name>
               <Location>InstrumentStatus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ConfigureServiceRequest(obj, Reason)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Status;
feature('COM_SafeArraySingleDim',1);
comobj.ConfigureServiceRequest(Reason);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Clears all the enable registers. It then sets the appropriate transition filters and enable registers so when the specified event(s) occur(s) the instrument requests service. All other events are disabled from generating a service request.</Description>
            </Method>
            <Method>
               <Name>Preset</Name>
               <Location>InstrumentStatus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Preset(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Status;
feature('COM_SafeArraySingleDim',1);
comobj.Preset();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Sets the SCPI defined enable registers and transition filters. It performs the actions specified by SCPI for the :STATus:PREset command, see SCPI Vol. 2: Command Reference, section 20.7.</Description>
            </Method>
            <Method>
               <Name>Register</Name>
               <Location>InstrumentStatus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [val] = Register(obj, Register, SubRegister, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Status;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Register(Register, SubRegister, varargin{:});
end
[val] = comobj.Register(Register, SubRegister);
</MCode>
               </Code>
               <Description>The contents of one of the status registers. In an IEEE 488.2 instrument, status registers come in Registers. See IEEE 488.2, section 11.4. SCPI provides names for some register Registers.  See SCPI Volume 1: Syntax and Style, Section 9. The Register para</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Measurement</Name>
         <Description>IAgilent546XX instrument-specific measurement collection interface (which provides access to the measurement interface objects).</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Measurement1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>FetchWaveform</Name>
               <Location>Measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pWaveformArray, pInitialX, pXIncrement] = FetchWaveform(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[pWaveformArray, pInitialX, pXIncrement] = comobj.FetchWaveform([0;0], 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns the previously-acquired waveform for the specified channel.</Description>
            </Method>
            <Method>
               <Name>FetchWaveformMeasurement</Name>
               <Location>Measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pMeasurement] = FetchWaveformMeasurement(obj, MeasFunction, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[pMeasurement] = comobj.FetchWaveformMeasurement(MeasFunction, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Fetches a specified waveform measurement from a specific channel from a previously initiated waveform acquisition.</Description>
            </Method>
            <Method>
               <Name>FetchWaveformMinMax</Name>
               <Location>Measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pMinWaveform, pMaxWaveform, pInitialX, pXIncrement] = FetchWaveformMinMax(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[pMinWaveform, pMaxWaveform, pInitialX, pXIncrement] = comobj.FetchWaveformMinMax([0;0], [0;0], 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns the minimum and maximum waveforms that the oscilloscope acquires for the specified channel.</Description>
            </Method>
            <Method>
               <Name>FunctionName</Name>
               <Location>Measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pVal] = FunctionName(obj, MeasFunction, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[pVal] = comobj.FunctionName(MeasFunction, '');
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns the name for a given measurement (see Agilent546XXMeasurementEnum).</Description>
            </Method>
            <Method>
               <Name>ReadWaveform</Name>
               <Location>Measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pWaveformArray, pInitialX, pXIncrement] = ReadWaveform(obj, MaxTime, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[pWaveformArray, pInitialX, pXIncrement] = comobj.ReadWaveform(MaxTime, [0;0], 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Acquires and returns a waveform on the configured channels.</Description>
            </Method>
            <Method>
               <Name>ReadWaveformMeasurement</Name>
               <Location>Measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pMeasurement] = ReadWaveformMeasurement(obj, MeasFunction, MaxTime, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[pMeasurement] = comobj.ReadWaveformMeasurement(MeasFunction, MaxTime, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates a waveform acquisition, and returns a specified waveform measurement from a specific channel.</Description>
            </Method>
            <Method>
               <Name>ReadWaveformMinMax</Name>
               <Location>Measurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pMinWaveform, pMaxWaveform, pInitialX, pXIncrement] = ReadWaveformMinMax(obj, MaxTime, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements;
name = comobj.Name(obj.HwIndex);
comobj = comobj.Item(name);
feature('COM_SafeArraySingleDim',1);
[pMinWaveform, pMaxWaveform, pInitialX, pXIncrement] = comobj.ReadWaveformMinMax(MaxTime, [0;0], [0;0], 0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates waveform acquisition, and returns the minimum and maximum waveforms from a specific channel.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Measurements</Name>
         <Description>IAgilent546XX instrument-specific measurement collection interface (which provides access to the measurement interface objects).</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Measurements1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Count</Name>
               <Location>Measurements</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Measurements;
	propertyValue = comobj.Count;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The total number of Measurement interfaces available.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Abort</Name>
               <Location>Measurements</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Abort(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements;
feature('COM_SafeArraySingleDim',1);
comobj.Abort();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Aborts an acquisition and returns the oscilloscope to the Idle state.</Description>
            </Method>
            <Method>
               <Name>AutoSetup</Name>
               <Location>Measurements</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function AutoSetup(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements;
feature('COM_SafeArraySingleDim',1);
comobj.AutoSetup();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Performs an auto-setup on the instrument.</Description>
            </Method>
            <Method>
               <Name>Initiate</Name>
               <Location>Measurements</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Initiate(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements;
feature('COM_SafeArraySingleDim',1);
comobj.Initiate();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Initiates a waveform acquisition.</Description>
            </Method>
            <Method>
               <Name>IsWaveformElementInvalid</Name>
               <Location>Measurements</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [val] = IsWaveformElementInvalid(obj, Element)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements;
feature('COM_SafeArraySingleDim',1);
[val] = comobj.IsWaveformElementInvalid(double(Element));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Determines whether a value you pass from the waveform array is invalid.</Description>
            </Method>
            <Method>
               <Name>Item</Name>
               <Location>Measurements</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [val] = Item(obj, Name, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Item(Name, varargin{:});
end
[val] = comobj.Item(Name);
</MCode>
               </Code>
               <Description>The Measurement interface object for the named measurement.</Description>
            </Method>
            <Method>
               <Name>Name</Name>
               <Location>Measurements</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [val] = Name(obj, Index, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements;
feature('COM_SafeArraySingleDim',1);
if ~isempty(varargin)
	comobj.Name(int32(Index), varargin{:});
end
[val] = comobj.Name(int32(Index));
</MCode>
               </Code>
               <Description>The name of a particular measurement, given its zero-indexed number.</Description>
            </Method>
            <Method>
               <Name>Status</Name>
               <Location>Measurements</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [val] = Status(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Measurements;
feature('COM_SafeArraySingleDim',1);
[val] = comobj.Status();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Returns whether acquisition status is in progress, complete, or unknown.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>MultiWaveformMeasurement</Name>
         <Description>IAgilent546XX instrument-specific multi-waveform measurement interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="MultiWaveformMeasurement1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>DelayOccurence1</Name>
               <Location>MultiWaveformMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MultiWaveformMeasurement;
	propertyValue = comobj.DelayOccurence1;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MultiWaveformMeasurement;
	comobj.DelayOccurence1 = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The occurrence count for the first waveform source of a generic delay measurement.</Description>
            </Property>
            <Property>
               <Name>DelayOccurence2</Name>
               <Location>MultiWaveformMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MultiWaveformMeasurement;
	propertyValue = comobj.DelayOccurence2;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MultiWaveformMeasurement;
	comobj.DelayOccurence2 = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The occurrence count for the second waveform source of a generic delay measurement.</Description>
            </Property>
            <Property>
               <Name>DelaySlope1</Name>
               <Location>MultiWaveformMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MultiWaveformMeasurement;
	propertyValue = comobj.DelaySlope1;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MultiWaveformMeasurement;
	comobj.DelaySlope1 = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent546XXMeasurementSlopePositive" Value="Agilent546XXMeasurementSlopePositive"/>
                     <Enum Name="Agilent546XXMeasurementSlopeNegative" Value="Agilent546XXMeasurementSlopeNegative"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The polarity of the slope for the first waveform source of a generic delay measurement.</Description>
            </Property>
            <Property>
               <Name>DelaySlope2</Name>
               <Location>MultiWaveformMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MultiWaveformMeasurement;
	propertyValue = comobj.DelaySlope2;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MultiWaveformMeasurement;
	comobj.DelaySlope2 = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent546XXMeasurementSlopePositive" Value="Agilent546XXMeasurementSlopePositive"/>
                     <Enum Name="Agilent546XXMeasurementSlopeNegative" Value="Agilent546XXMeasurementSlopeNegative"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The polarity of the slope for the second waveform source of a generic delay measurement.</Description>
            </Property>
            <Property>
               <Name>Source2</Name>
               <Location>MultiWaveformMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MultiWaveformMeasurement;
	propertyValue = comobj.Source2;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.MultiWaveformMeasurement;
	comobj.Source2 = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The second waveform source the oscilloscope uses for dual channel measurements.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>ConfigureDelay</Name>
               <Location>MultiWaveformMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ConfigureDelay(obj, Source2, Slope1, Slope2, DelayOccurence1, DelayOccurence2)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.MultiWaveformMeasurement;
feature('COM_SafeArraySingleDim',1);
comobj.ConfigureDelay(Source2, Slope1, Slope2, int32(DelayOccurence1), int32(DelayOccurence2));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the edge specifications for the delay measurements.</Description>
            </Method>
            <Method>
               <Name>ReadActivity</Name>
               <Location>MultiWaveformMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pEdges, pLevels] = ReadActivity(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.MultiWaveformMeasurement;
feature('COM_SafeArraySingleDim',1);
[pEdges, pLevels] = comobj.ReadActivity(0, 0);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Reads digital channel activity into the edges and levels parameters.  Levels: are current logic levels.  Edges: are active edges since the last ResetActivity() call.  In the values read, bit 0 is for digital channel 0, and bit 15 is for digital channel 15</Description>
            </Method>
            <Method>
               <Name>ResetActivity</Name>
               <Location>MultiWaveformMeasurement</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ResetActivity(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.MultiWaveformMeasurement;
feature('COM_SafeArraySingleDim',1);
comobj.ResetActivity();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Clears the logic activity registers of the oscilloscope.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ReferenceLevel</Name>
         <Description>IAgilent546XX instrument-specific reference level interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ReferenceLevel1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>High</Name>
               <Location>ReferenceLevel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ReferenceLevel;
	propertyValue = comobj.High;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ReferenceLevel;
	comobj.High = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The high reference level the oscilloscope uses for waveform measurements.</Description>
            </Property>
            <Property>
               <Name>Low</Name>
               <Location>ReferenceLevel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ReferenceLevel;
	propertyValue = comobj.Low;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ReferenceLevel;
	comobj.Low = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The low reference level the oscilloscope uses for waveform measurements.</Description>
            </Property>
            <Property>
               <Name>Mid</Name>
               <Location>ReferenceLevel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ReferenceLevel;
	propertyValue = comobj.Mid;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.ReferenceLevel;
	comobj.Mid = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The middle reference level the oscilloscope uses for waveform measurements.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>ReferenceLevel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Low, Mid, High)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.ReferenceLevel;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(double(Low), double(Mid), double(High));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the low, mid, and high reference levels for waveform measurements.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>SetupMemory</Name>
         <Description>IAgilent546XX instrument-specific setup memory interface (for saving/recalling instrument setups to/from instrument memory).</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="SetupMemory1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>Download</Name>
               <Location>SetupMemory</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Download(obj, SetupFile)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.SetupMemory;
feature('COM_SafeArraySingleDim',1);
comobj.Download(SetupFile);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Downloads a previously stored configuration setup from memory into the current running configuration of the oscilloscope.</Description>
            </Method>
            <Method>
               <Name>Fetch</Name>
               <Location>SetupMemory</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pSetupFile] = Fetch(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.SetupMemory;
feature('COM_SafeArraySingleDim',1);
[pSetupFile] = comobj.Fetch('');
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Fetches the current configuration setup of the oscilloscope and stores it in the specified memory location.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>System</Name>
         <Description>Agilent546XX System interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="System1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>AsyncEventsEnabled</Name>
               <Location>System</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	propertyValue = comobj.AsyncEventsEnabled;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj.AsyncEventsEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Driver does not support this class-compliant feature: property.</Description>
            </Property>
            <Property>
               <Name>Date</Name>
               <Location>System</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	propertyValue = comobj.Date;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj.Date = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Current date formatted as 'YYYY, MM,DD'. YYYY is a four-digit representation of the year including century and millennium information. MM is a two-digit representation of the month where January is 1 and December is 12. DD is the day of the month.</Description>
            </Property>
            <Property>
               <Name>SerialNumber</Name>
               <Location>System</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	propertyValue = comobj.SerialNumber;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
%	NOTE: This property is defined as read only.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Instrument serial number.</Description>
            </Property>
            <Property>
               <Name>Time</Name>
               <Location>System</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	propertyValue = comobj.Time;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj.Time = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Current time formatted as 'HH,MM,SS.SSSSS'. HH is the hour and its range is 0 to 23 inclusive. MM is the minute and its range is 0 to 59 inclusive. SS is the second in the range 0 to 59.999.</Description>
            </Property>
            <Property>
               <Name>TimeoutMilliseconds</Name>
               <Location>System</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	propertyValue = comobj.TimeoutMilliseconds;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj.TimeoutMilliseconds = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The value, in milliseconds, of the default timeout used by I/O operations. This property provides access to the driver's Visa Session Timeout. &lt;p&gt;Only in rare, unusual circumstances should the client set this property. Driver methods and properties with o</Description>
            </Property>
            <Property>
               <Name>TraceEnabled</Name>
               <Location>System</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	propertyValue = comobj.TraceEnabled;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj.TraceEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>If true, execution tracing is turned on and the driver generates execution trace information using the IVI Event Server. If false, execution tracing is turned off and the driver does not generate trace information.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>DisableLocalControls</Name>
               <Location>System</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function DisableLocalControls(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
feature('COM_SafeArraySingleDim',1);
comobj.DisableLocalControls();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Puts the instrument into a state where all local controls, including return to local, are disabled from changing the state of the instrument. The power switch is excluded. The client program can ensure that an operator cannot   change the state of an inst</Description>
            </Method>
            <Method>
               <Name>EnableLocalControls</Name>
               <Location>System</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function EnableLocalControls(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
feature('COM_SafeArraySingleDim',1);
comobj.EnableLocalControls();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Allows an operator to examine and change the instrument's state through its local controls. The client can allow an operator to interact directly with the instrument through its front panel for a period of time.</Description>
            </Method>
            <Method>
               <Name>GetScreenBitmap</Name>
               <Location>System</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pBitmap] = GetScreenBitmap(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
feature('COM_SafeArraySingleDim',1);
[pBitmap] = comobj.GetScreenBitmap([0;0]);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Bitmap of current display</Description>
            </Method>
            <Method>
               <Name>GetState</Name>
               <Location>System</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pData] = GetState(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
feature('COM_SafeArraySingleDim',1);
[pData] = comobj.GetState([0;0]);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Retrieves a buffer that contains a representation of the instrument's state.The client should not change the contents of the buffer.</Description>
            </Method>
            <Method>
               <Name>PutState</Name>
               <Location>System</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function PutState(obj, Data)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
feature('COM_SafeArraySingleDim',1);
comobj.PutState(Data);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Puts the instrument back to the state represented in the Buffer parameter. The contents of the parameter should be those retrieved by the GetState method.</Description>
            </Method>
            <Method>
               <Name>RecallState</Name>
               <Location>System</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function RecallState(obj, Identifier)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
feature('COM_SafeArraySingleDim',1);
comobj.RecallState(Identifier);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Restore the instrument to a state previously stored in the instrument's internal memory.</Description>
            </Method>
            <Method>
               <Name>SaveState</Name>
               <Location>System</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SaveState(obj, Identifier)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
feature('COM_SafeArraySingleDim',1);
comobj.SaveState(Identifier);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Save the instrument's state the instrument's internal memory.</Description>
            </Method>
            <Method>
               <Name>WaitForOperationComplete</Name>
               <Location>System</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function WaitForOperationComplete(obj, MaxTimeMilliseconds)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
feature('COM_SafeArraySingleDim',1);
comobj.WaitForOperationComplete(int32(MaxTimeMilliseconds));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Does not return until previously started operations complete or more MaxTimeMilliseconds milliseconds of time have expired.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>SystemIO</Name>
         <Description>IEEE 488.2 Formatted I/O Interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="SystemIO1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>InstrumentBigEndian</Name>
               <Location>SystemIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj = comobj.IO;
	propertyValue = comobj.InstrumentBigEndian;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj = comobj.IO;
	comobj.InstrumentBigEndian = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Get/Set whether the instrument communicates in Big Endian (IEEE 488.2) format</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>FlushRead</Name>
               <Location>SystemIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function FlushRead(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
comobj.FlushRead();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Flush the Read Buffer</Description>
            </Method>
            <Method>
               <Name>FlushWrite</Name>
               <Location>SystemIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function FlushWrite(obj, sendEND)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
comobj.FlushWrite(sendEND);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Flush the Write Buffer and optionally send the END signal</Description>
            </Method>
            <Method>
               <Name>ReadIEEEBlock</Name>
               <Location>SystemIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pData] = ReadIEEEBlock(obj, type, seekToBlock, flushToEND)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
[pData] = comobj.ReadIEEEBlock(type, seekToBlock, flushToEND);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Read a definite-length IEEE block from the I/O Stream and optionally flush the buffer</Description>
            </Method>
            <Method>
               <Name>ReadList</Name>
               <Location>SystemIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pData] = ReadList(obj, type, listSeperator)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
[pData] = comobj.ReadList(type, listSeperator);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Read a list of values in ASCII format from the I/O Stream, convert them to the specified type, and optionally flush the buffer</Description>
            </Method>
            <Method>
               <Name>ReadNumber</Name>
               <Location>SystemIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pData] = ReadNumber(obj, type, flushToEND)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
[pData] = comobj.ReadNumber(type, flushToEND);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Read a single number from the I/O Stream and optionally flush the buffer</Description>
            </Method>
            <Method>
               <Name>ReadString</Name>
               <Location>SystemIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pData] = ReadString(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
[pData] = comobj.ReadString();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Read the entire contents of the buffer until the termination character / END signal and return the data as a string</Description>
            </Method>
            <Method>
               <Name>SetBufferSize</Name>
               <Location>SystemIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function SetBufferSize(obj, mask, size)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
comobj.SetBufferSize(mask, int32(size));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Set the formatted I/O read or write buffer size</Description>
            </Method>
            <Method>
               <Name>WriteIEEEBlock</Name>
               <Location>SystemIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function WriteIEEEBlock(obj, Command, data, flushAndEND)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
comobj.WriteIEEEBlock(Command, flushAndEND);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Write a command followed by an IEEE 488.2 definite-length binary block terminated with the Stream's termination character to the I/O Stream</Description>
            </Method>
            <Method>
               <Name>WriteList</Name>
               <Location>SystemIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function WriteList(obj, data, type, listSeperator, flushAndEND)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
comobj.WriteList(type, listSeperator, flushAndEND);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Write a list of values to the I/O Stream and optionally flush the buffer</Description>
            </Method>
            <Method>
               <Name>WriteNumber</Name>
               <Location>SystemIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function WriteNumber(obj, data, type, flushAndEND)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
comobj.WriteNumber(type, flushAndEND);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Write a single number to the I/O Stream and optionally flush the buffer</Description>
            </Method>
            <Method>
               <Name>WriteString</Name>
               <Location>SystemIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function WriteString(obj, data, flushAndEND)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
comobj.WriteString(data, flushAndEND);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Write a string to the I/O Stream and optionally flush the buffer</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>SystemIOIO</Name>
         <Description>Message Based Interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="SystemIOIO1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>IOProtocol</Name>
               <Location>SystemIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj = comobj.IO;
	comobj = comobj.IO;
	propertyValue = comobj.IOProtocol;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj = comobj.IO;
	comobj = comobj.IO;
	comobj.IOProtocol = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="PROT_NORMAL" Value="PROT_NORMAL"/>
                     <Enum Name="PROT_FDC" Value="PROT_FDC"/>
                     <Enum Name="PROT_HS488" Value="PROT_HS488"/>
                     <Enum Name="PROT_4882_STRS" Value="PROT_4882_STRS"/>
                     <Enum Name="PROT_USBTMC_VENDOR" Value="PROT_USBTMC_VENDOR"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Get/Set which I/O protocol to use</Description>
            </Property>
            <Property>
               <Name>SendEndEnabled</Name>
               <Location>SystemIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj = comobj.IO;
	comobj = comobj.IO;
	propertyValue = comobj.SendEndEnabled;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj = comobj.IO;
	comobj = comobj.IO;
	comobj.SendEndEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Get/Set whether to assert END on Write</Description>
            </Property>
            <Property>
               <Name>TerminationCharacter</Name>
               <Location>SystemIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj = comobj.IO;
	comobj = comobj.IO;
	propertyValue = comobj.TerminationCharacter;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj = comobj.IO;
	comobj = comobj.IO;
	comobj.TerminationCharacter = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Get/Set the termination character</Description>
            </Property>
            <Property>
               <Name>TerminationCharacterEnabled</Name>
               <Location>SystemIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj = comobj.IO;
	comobj = comobj.IO;
	propertyValue = comobj.TerminationCharacterEnabled;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.System;
	comobj = comobj.IO;
	comobj = comobj.IO;
	comobj.TerminationCharacterEnabled = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Get/Set whether to use the termination character on Read</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>AssertTrigger</Name>
               <Location>SystemIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function AssertTrigger(obj, protocol)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
comobj = comobj.IO;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
comobj.AssertTrigger(protocol);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Assert a trigger</Description>
            </Method>
            <Method>
               <Name>Clear</Name>
               <Location>SystemIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Clear(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
comobj = comobj.IO;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
comobj.Clear();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Clear the device</Description>
            </Method>
            <Method>
               <Name>Read</Name>
               <Location>SystemIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pBuffer] = Read(obj, count)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
comobj = comobj.IO;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
[pBuffer] = comobj.Read(int32(count));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Read the specified number of bytes</Description>
            </Method>
            <Method>
               <Name>ReadSTB</Name>
               <Location>SystemIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pStatusByte] = ReadSTB(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
comobj = comobj.IO;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
[pStatusByte] = comobj.ReadSTB();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Read the status byte</Description>
            </Method>
            <Method>
               <Name>ReadString</Name>
               <Location>SystemIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pBuffer] = ReadString(obj, count)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
comobj = comobj.IO;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
[pBuffer] = comobj.ReadString(int32(count));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Read the specified number of bytes as a string</Description>
            </Method>
            <Method>
               <Name>Write</Name>
               <Location>SystemIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pRetCount] = Write(obj, buffer, count)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
comobj = comobj.IO;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
[pRetCount] = comobj.Write(buffer, int32(count));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Write the specified data</Description>
            </Method>
            <Method>
               <Name>WriteString</Name>
               <Location>SystemIOIO</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [pRetCount] = WriteString(obj, buffer)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.System;
comobj = comobj.IO;
comobj = comobj.IO;
feature('COM_SafeArraySingleDim',1);
[pRetCount] = comobj.WriteString(buffer);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Write the specified string</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Trigger</Name>
         <Description>IAgilent546XX instrument-specific trigger interface (for accessing the trigger parameters.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Trigger1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Continuous</Name>
               <Location>Trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	propertyValue = comobj.Continuous;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
if ischar(propertyValue) &amp;&amp; strcmpi(propertyValue,'on')
	propertyValue = 1;
end
if strcmpi(propertyValue,'off')
	propertyValue = 0;
end

try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj.Continuous = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Boolean</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>If True, the oscilloscope continuously initiates waveform acquisition.</Description>
            </Property>
            <Property>
               <Name>Coupling</Name>
               <Location>Trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	propertyValue = comobj.Coupling;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj.Coupling = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent546XXTriggerCouplingAC" Value="Agilent546XXTriggerCouplingAC"/>
                     <Enum Name="Agilent546XXTriggerCouplingDC" Value="Agilent546XXTriggerCouplingDC"/>
                     <Enum Name="Agilent546XXTriggerCouplingHFReject" Value="Agilent546XXTriggerCouplingHFReject"/>
                     <Enum Name="Agilent546XXTriggerCouplingLFReject" Value="Agilent546XXTriggerCouplingLFReject"/>
                     <Enum Name="Agilent546XXTriggerCouplingNoiseReject" Value="Agilent546XXTriggerCouplingNoiseReject"/>
                     <Enum Name="Agilent546XXTriggerCouplingTV" Value="Agilent546XXTriggerCouplingTV"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>How the oscilloscope couples the trigger source.</Description>
            </Property>
            <Property>
               <Name>Holdoff</Name>
               <Location>Trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	propertyValue = comobj.Holdoff;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj.Holdoff = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The length of time to wait after detecting a trigger before enabling the trigger subsystem again.</Description>
            </Property>
            <Property>
               <Name>Level</Name>
               <Location>Trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	propertyValue = comobj.Level;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj.Level = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The voltage threshold for the trigger sub-system.</Description>
            </Property>
            <Property>
               <Name>Modifier</Name>
               <Location>Trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	propertyValue = comobj.Modifier;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj.Modifier = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent546XXTriggerModifierNone" Value="Agilent546XXTriggerModifierNone"/>
                     <Enum Name="Agilent546XXTriggerModifierAuto" Value="Agilent546XXTriggerModifierAuto"/>
                     <Enum Name="Agilent546XXTriggerModifierAutoLevel" Value="Agilent546XXTriggerModifierAutoLevel"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The oscilloscope's behavior in the absence of the configured trigger.</Description>
            </Property>
            <Property>
               <Name>Source</Name>
               <Location>Trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	propertyValue = comobj.Source;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj.Source = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The source the oscilloscope monitors for the trigger event.</Description>
            </Property>
            <Property>
               <Name>TriggerType</Name>
               <Location>Trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	propertyValue = comobj.Type;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj.Type = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent546XXTriggerEdge" Value="Agilent546XXTriggerEdge"/>
                     <Enum Name="Agilent546XXTriggerWidth" Value="Agilent546XXTriggerWidth"/>
                     <Enum Name="Agilent546XXTriggerRunt" Value="Agilent546XXTriggerRunt"/>
                     <Enum Name="Agilent546XXTriggerGlitch" Value="Agilent546XXTriggerGlitch"/>
                     <Enum Name="Agilent546XXTriggerTV" Value="Agilent546XXTriggerTV"/>
                     <Enum Name="Agilent546XXTriggerImmediate" Value="Agilent546XXTriggerImmediate"/>
                     <Enum Name="Agilent546XXTriggerACLine" Value="Agilent546XXTriggerACLine"/>
                     <Enum Name="Agilent546XXTriggerPattern" Value="Agilent546XXTriggerPattern"/>
                     <Enum Name="Agilent546XXTriggerState" Value="Agilent546XXTriggerState"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The type of event that triggers the oscilloscope.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>Trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Type, Holdoff)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(Type, double(Holdoff));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the trigger type and holdoff.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>TriggerAcLine</Name>
         <Description>IAgilent546XX instrument-specific AC line trigger interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggerAcLine1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Slope</Name>
               <Location>TriggerAcLine</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.AcLine;
	propertyValue = comobj.Slope;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.AcLine;
	comobj.Slope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent546XXACLinePositive" Value="Agilent546XXACLinePositive"/>
                     <Enum Name="Agilent546XXACLineNegative" Value="Agilent546XXACLineNegative"/>
                     <Enum Name="Agilent546XXACLineEither" Value="Agilent546XXACLineEither"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The slope of the zero crossing upon which the oscilloscope triggers.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>TriggerEdge</Name>
         <Description>IAgilent546XX instrument-specific edge trigger interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggerEdge1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Slope</Name>
               <Location>TriggerEdge</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Edge;
	propertyValue = comobj.Slope;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Edge;
	comobj.Slope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent546XXTriggerSlopeNegative" Value="Agilent546XXTriggerSlopeNegative"/>
                     <Enum Name="Agilent546XXTriggerSlopePositive" Value="Agilent546XXTriggerSlopePositive"/>
                     <Enum Name="Agilent546XXTriggerSlopeEither" Value="Agilent546XXTriggerSlopeEither"/>
                     <Enum Name="Agilent546XXTriggerSlopeAlternate" Value="Agilent546XXTriggerSlopeAlternate"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Whether a rising or a falling edge triggers the oscilloscope.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>TriggerEdge</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Source, Level, Slope)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger;
comobj = comobj.Edge;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(Source, double(Level), Slope);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the Edge Trigger parameters.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>TriggerGlitch</Name>
         <Description>IAgilent546XX instrument-specific glitch trigger interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggerGlitch1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>condition</Name>
               <Location>TriggerGlitch</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Glitch;
	propertyValue = comobj.condition;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Glitch;
	comobj.condition = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent546XXGlitchLessThan" Value="Agilent546XXGlitchLessThan"/>
                     <Enum Name="Agilent546XXGlitchGreaterThan" Value="Agilent546XXGlitchGreaterThan"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Whether glitches less than or greater than the specified duration trigger the oscilloscope.</Description>
            </Property>
            <Property>
               <Name>polarity</Name>
               <Location>TriggerGlitch</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Glitch;
	propertyValue = comobj.polarity;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Glitch;
	comobj.polarity = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent546XXGlitchPositive" Value="Agilent546XXGlitchPositive"/>
                     <Enum Name="Agilent546XXGlitchNegative" Value="Agilent546XXGlitchNegative"/>
                     <Enum Name="Agilent546XXGlitchEither" Value="Agilent546XXGlitchEither"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The polarity of the glitch that triggers the oscilloscope.</Description>
            </Property>
            <Property>
               <Name>Width</Name>
               <Location>TriggerGlitch</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Glitch;
	propertyValue = comobj.Width;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Glitch;
	comobj.Width = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The glitch width in seconds.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>TriggerGlitch</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Source, Level, Width, polarity, condition)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger;
comobj = comobj.Glitch;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(Source, double(Level), double(Width), polarity, condition);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the glitch trigger.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>TriggerPattern</Name>
         <Description>IAgilent546XX instrument-specific pattern trigger interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggerPattern1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>AnalogMask</Name>
               <Location>TriggerPattern</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Pattern;
	propertyValue = comobj.AnalogMask;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Pattern;
	comobj.AnalogMask = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The analog channel bits to enable for the pattern matching of the trigger specification.</Description>
            </Property>
            <Property>
               <Name>AnalogPattern</Name>
               <Location>TriggerPattern</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Pattern;
	propertyValue = comobj.AnalogPattern;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Pattern;
	comobj.AnalogPattern = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The analog channel pattern.</Description>
            </Property>
            <Property>
               <Name>condition</Name>
               <Location>TriggerPattern</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Pattern;
	propertyValue = comobj.condition;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Pattern;
	comobj.condition = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent546XXPatternEnter" Value="Agilent546XXPatternEnter"/>
                     <Enum Name="Agilent546XXPatternExit" Value="Agilent546XXPatternExit"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The pattern matching condition.  This attribute specifies when the trigger event occurs with respect to the pattern, either trigger on entering the specified pattern or exiting the specified pattern.</Description>
            </Property>
            <Property>
               <Name>DigitalMask</Name>
               <Location>TriggerPattern</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Pattern;
	propertyValue = comobj.DigitalMask;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Pattern;
	comobj.DigitalMask = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The digital channel bits to enable for the pattern matching of the trigger specification.</Description>
            </Property>
            <Property>
               <Name>DigitalPattern</Name>
               <Location>TriggerPattern</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Pattern;
	propertyValue = comobj.DigitalPattern;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Pattern;
	comobj.DigitalPattern = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The digital channel pattern.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>TriggerPattern</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, AnalogPattern, AnalogMask, DigitalPattern, DigitalMask, MatchingMode)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger;
comobj = comobj.Pattern;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(int32(AnalogPattern), int32(AnalogMask), int32(DigitalPattern), int32(DigitalMask), MatchingMode);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the pattern trigger.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>TriggerRunt</Name>
         <Description>NOT SUPPORTED IN THE 546XX.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggerRunt1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>polarity</Name>
               <Location>TriggerRunt</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Runt;
	propertyValue = comobj.polarity;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Runt;
	comobj.polarity = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent546XXRuntPolarityPositive" Value="Agilent546XXRuntPolarityPositive"/>
                     <Enum Name="Agilent546XXRuntPolarityNegative" Value="Agilent546XXRuntPolarityNegative"/>
                     <Enum Name="Agilent546XXRuntPolarityEither" Value="Agilent546XXRuntPolarityEither"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The polarity of the runt that triggers the oscilloscope.  NOT SUPPORTED IN THE 546XX.</Description>
            </Property>
            <Property>
               <Name>ThresholdHigh</Name>
               <Location>TriggerRunt</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Runt;
	propertyValue = comobj.ThresholdHigh;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Runt;
	comobj.ThresholdHigh = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The high threshold the oscilloscope uses for runt triggering.  The units are volts.  NOT SUPPORTED IN THE 546XX.</Description>
            </Property>
            <Property>
               <Name>ThresholdLow</Name>
               <Location>TriggerRunt</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Runt;
	propertyValue = comobj.ThresholdLow;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Runt;
	comobj.ThresholdLow = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The low threshold the oscilloscope uses for runt triggering.  The units are volts.  NOT SUPPORTED IN THE 546XX.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>TriggerRunt</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Source, ThresholdLow, ThresholdHigh, polarity)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger;
comobj = comobj.Runt;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(Source, double(ThresholdLow), double(ThresholdHigh), polarity);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the runt trigger Source, ThresholdLow, ThresholdHigh, and Polarity.  A runt trigger occurs when the trigger signal crosses one of the runt thresholds twice without crossing the other runt threshold.  NOT SUPPORTED IN THE 546XX.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>TriggerState</Name>
         <Description>IAgilent546XX instrument-specific state (synchronous sampling) trigger interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggerState1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>AnalogMask</Name>
               <Location>TriggerState</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.State;
	propertyValue = comobj.AnalogMask;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.State;
	comobj.AnalogMask = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The analog channel bits to enable for the pattern matching of the trigger specification.</Description>
            </Property>
            <Property>
               <Name>AnalogPattern</Name>
               <Location>TriggerState</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.State;
	propertyValue = comobj.AnalogPattern;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.State;
	comobj.AnalogPattern = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The analog channel pattern.</Description>
            </Property>
            <Property>
               <Name>ClockSlope</Name>
               <Location>TriggerState</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.State;
	propertyValue = comobj.ClockSlope;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.State;
	comobj.ClockSlope = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent546XXTriggerSlopeNegative" Value="Agilent546XXTriggerSlopeNegative"/>
                     <Enum Name="Agilent546XXTriggerSlopePositive" Value="Agilent546XXTriggerSlopePositive"/>
                     <Enum Name="Agilent546XXTriggerSlopeEither" Value="Agilent546XXTriggerSlopeEither"/>
                     <Enum Name="Agilent546XXTriggerSlopeAlternate" Value="Agilent546XXTriggerSlopeAlternate"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Whether a rising or a falling edge triggers the oscilloscope when the user specified pattern on the other channels is present.</Description>
            </Property>
            <Property>
               <Name>ClockSource</Name>
               <Location>TriggerState</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.State;
	propertyValue = comobj.ClockSource;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.State;
	comobj.ClockSource = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The source the oscilloscope monitors for the an edge when a the specified pattern is present.</Description>
            </Property>
            <Property>
               <Name>DigitalMask</Name>
               <Location>TriggerState</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.State;
	propertyValue = comobj.DigitalMask;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.State;
	comobj.DigitalMask = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The digital channel bits to enable for the pattern matching of the trigger specification.</Description>
            </Property>
            <Property>
               <Name>DigitalPattern</Name>
               <Location>TriggerState</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.State;
	propertyValue = comobj.DigitalPattern;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.State;
	comobj.DigitalPattern = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The digital channel pattern.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>TriggerState</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, ClockSource, ClockLevel, ClockSlope, AnalogPattern, AnalogMask, DigitalPattern, DigitalMask)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger;
comobj = comobj.State;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(ClockSource, double(ClockLevel), ClockSlope, int32(AnalogPattern), int32(AnalogMask), int32(DigitalPattern), int32(DigitalMask));
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the state (synchronous sampling) trigger.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>TriggerTV</Name>
         <Description>IAgilent546XX instrument-specific TV trigger interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggerTV1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Event</Name>
               <Location>TriggerTV</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.TV;
	propertyValue = comobj.Event;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.TV;
	comobj.Event = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent546XXTVEventField1" Value="Agilent546XXTVEventField1"/>
                     <Enum Name="Agilent546XXTVEventField2" Value="Agilent546XXTVEventField2"/>
                     <Enum Name="Agilent546XXTVEventAnyField" Value="Agilent546XXTVEventAnyField"/>
                     <Enum Name="Agilent546XXTVEventAnyLine" Value="Agilent546XXTVEventAnyLine"/>
                     <Enum Name="Agilent546XXTVEventLineNumber" Value="Agilent546XXTVEventLineNumber"/>
                     <Enum Name="Agilent546XXTVEventLineNumberAlternate" Value="Agilent546XXTVEventLineNumberAlternate"/>
                     <Enum Name="Agilent546XXTVEventLineNumberVertical" Value="Agilent546XXTVEventLineNumberVertical"/>
                     <Enum Name="Agilent546XXTVEventVertical" Value="Agilent546XXTVEventVertical"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The event on which the oscilloscope triggers in TV Trigger mode.</Description>
            </Property>
            <Property>
               <Name>LineNumber</Name>
               <Location>TriggerTV</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.TV;
	propertyValue = comobj.LineNumber;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.TV;
	comobj.LineNumber = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The line on which the oscilloscope triggers.</Description>
            </Property>
            <Property>
               <Name>polarity</Name>
               <Location>TriggerTV</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.TV;
	propertyValue = comobj.polarity;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.TV;
	comobj.polarity = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent546XXTVTriggerPositive" Value="Agilent546XXTVTriggerPositive"/>
                     <Enum Name="Agilent546XXTVTriggerNegative" Value="Agilent546XXTVTriggerNegative"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The polarity of the TV signal.</Description>
            </Property>
            <Property>
               <Name>SignalFormat</Name>
               <Location>TriggerTV</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.TV;
	propertyValue = comobj.SignalFormat;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.TV;
	comobj.SignalFormat = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent546XXTVSignalFormatNTSC" Value="Agilent546XXTVSignalFormatNTSC"/>
                     <Enum Name="Agilent546XXTVSignalFormatPAL" Value="Agilent546XXTVSignalFormatPAL"/>
                     <Enum Name="Agilent546XXTVSignalFormatSECAM" Value="Agilent546XXTVSignalFormatSECAM"/>
                     <Enum Name="Agilent546XXTVSignalFormatPALM" Value="Agilent546XXTVSignalFormatPALM"/>
                     <Enum Name="Agilent546XXTVSignalFormatGeneric" Value="Agilent546XXTVSignalFormatGeneric"/>
                     <Enum Name="Agilent546XXTVSignalFormatP480" Value="Agilent546XXTVSignalFormatP480"/>
                     <Enum Name="Agilent546XXTVSignalFormatP720" Value="Agilent546XXTVSignalFormatP720"/>
                     <Enum Name="Agilent546XXTVSignalFormatP1080" Value="Agilent546XXTVSignalFormatP1080"/>
                     <Enum Name="Agilent546XXTVSignalFormatI1080" Value="Agilent546XXTVSignalFormatI1080"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The format of TV signal on which the oscilloscope triggers.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>TriggerTV</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Source, SignalFormat, Event, polarity)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger;
comobj = comobj.TV;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(Source, SignalFormat, Event, polarity);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the TV Trigger parameters.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>TriggerWidth</Name>
         <Description>IAgilent546XX instrument-specific pulse width trigger interface.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="TriggerWidth1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>condition</Name>
               <Location>TriggerWidth</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Width;
	propertyValue = comobj.condition;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Width;
	comobj.condition = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent546XXWidthWithin" Value="Agilent546XXWidthWithin"/>
                     <Enum Name="Agilent546XXWidthOutside" Value="Agilent546XXWidthOutside"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Whether a pulse within or outside the high and low thresholds triggers the oscilloscope.</Description>
            </Property>
            <Property>
               <Name>polarity</Name>
               <Location>TriggerWidth</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Width;
	propertyValue = comobj.polarity;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Width;
	comobj.polarity = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Enum Name="Agilent546XXWidthPositive" Value="Agilent546XXWidthPositive"/>
                     <Enum Name="Agilent546XXWidthNegative" Value="Agilent546XXWidthNegative"/>
                     <Enum Name="Agilent546XXWidthEither" Value="Agilent546XXWidthEither"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The polarity of the pulse that triggers the oscilloscope.</Description>
            </Property>
            <Property>
               <Name>ThresholdHigh</Name>
               <Location>TriggerWidth</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Width;
	propertyValue = comobj.ThresholdHigh;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Width;
	comobj.ThresholdHigh = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The high width threshold time in seconds.</Description>
            </Property>
            <Property>
               <Name>ThresholdLow</Name>
               <Location>TriggerWidth</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Width;
	propertyValue = comobj.ThresholdLow;
catch
	propertyValue = [];
end
</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
try
	comobj = obj.Parent;
	comobj = comobj.Interface;
	comobj = comobj.Trigger;
	comobj = comobj.Width;
	comobj.ThresholdLow = propertyValue;
catch aException
	rethrow(aException);
end</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The low width threshold time in seconds.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>Configure</Name>
               <Location>TriggerWidth</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Configure(obj, Source, Level, ThresholdLow, ThresholdHigh, polarity, condition)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Trigger;
comobj = comobj.Width;
feature('COM_SafeArraySingleDim',1);
comobj.Configure(Source, double(Level), double(ThresholdLow), double(ThresholdHigh), polarity, condition);
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Configures the width trigger.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>Utility</Name>
         <Description>IVI Driver utility interface</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Utility1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>Disable</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Disable(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Utility;
feature('COM_SafeArraySingleDim',1);
comobj.Disable();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Quickly places the instrument in a state where it has no, or minimal, effect on the external system to which it is connected.  This state is not necessarily a known state.</Description>
            </Method>
            <Method>
               <Name>ErrorQuery</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [ErrorCode, ErrorMessage] = ErrorQuery(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Utility;
feature('COM_SafeArraySingleDim',1);
[ErrorCode, ErrorMessage] = comobj.ErrorQuery(0, '');
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Queries the instrument and returns instrument specific error information.  This function can be used when QueryInstrumentStatus is True to retrieve error details when the driver detects an instrument error.</Description>
            </Method>
            <Method>
               <Name>LockObject</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function LockObject(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Utility;
feature('COM_SafeArraySingleDim',1);
comobj.LockObject();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Obtains a multithread lock on the driver after waiting until all other execution threads have released their locks on the instrument session.</Description>
            </Method>
            <Method>
               <Name>Reset</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Reset(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Utility;
feature('COM_SafeArraySingleDim',1);
comobj.Reset();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Places the instrument in a known state and configures instrument options on which the IVI specific driver depends (for example, enabling/disabling headers).  For an IEEE 488.2 instrument, Reset sends the command string *RST to the instrument.</Description>
            </Method>
            <Method>
               <Name>ResetWithDefaults</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ResetWithDefaults(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Utility;
feature('COM_SafeArraySingleDim',1);
comobj.ResetWithDefaults();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Does the equivalent of Reset and then, (1) disables class extension capability groups, (2) sets attributes to initial values defined by class specs, and (3) configures the driver to option string settings used when Initialize was last executed.</Description>
            </Method>
            <Method>
               <Name>SelfTest</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [TestResult, TestMessage] = SelfTest(obj, varargin)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Utility;
feature('COM_SafeArraySingleDim',1);
[TestResult, TestMessage] = comobj.SelfTest(0, '');
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Performs an instrument self test, waits for the instrument to complete the test, and queries the instrument for the results.  If the instrument passes the test, TestResult is zero and TestMessage is 'Self test passed'.</Description>
            </Method>
            <Method>
               <Name>UnlockObject</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function UnlockObject(obj)

comobj = obj.Parent;
comobj = comobj.Interface;
comobj = comobj.Utility;
feature('COM_SafeArraySingleDim',1);
comobj.UnlockObject();
feature('COM_SafeArraySingleDim',0);
</MCode>
               </Code>
               <Description>Releases a previously obtained mutlithread lock.</Description>
            </Method>
         </MethodInfo>
      </Group>
   </GroupInfo>
</MATLABInstrumentDriver>